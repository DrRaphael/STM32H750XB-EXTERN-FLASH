
STM32H750XB-EXTERN-FLASH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a78  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005d18  08005d18  00015d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005df8  08005df8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005df8  08005df8  00015df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e00  08005e00  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e00  08005e00  00015e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e04  08005e04  00015e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08005e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  24000074  08005e7c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  2400017c  08005e7c  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d76  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e59  00000000  00000000  00039e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c78  00000000  00000000  0003cc78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b40  00000000  00000000  0003d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037725  00000000  00000000  0003e430  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c7c2  00000000  00000000  00075b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00159776  00000000  00000000  00082317  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001dba8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003890  00000000  00000000  001dbb08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005d00 	.word	0x08005d00

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08005d00 	.word	0x08005d00

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <Test>:
#include "QSPI_XIP.h"
void Test()
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	uint32_t addr = 0x08005000;
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <Test+0x24>)
 8000688:	607b      	str	r3, [r7, #4]
	uint32_t *NUID = *(__IO uint16_t*)(addr);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	b29b      	uxth	r3, r3
 8000690:	603b      	str	r3, [r7, #0]
	printf("Hello = %x \n",NUID);
 8000692:	6839      	ldr	r1, [r7, #0]
 8000694:	4804      	ldr	r0, [pc, #16]	; (80006a8 <Test+0x28>)
 8000696:	f004 fc4f 	bl	8004f38 <iprintf>


}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	08005000 	.word	0x08005000
 80006a8:	08005d18 	.word	0x08005d18

080006ac <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b087      	sub	sp, #28
 80006b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b28      	ldr	r3, [pc, #160]	; (8000754 <MX_GPIO_Init+0xa8>)
 80006b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b8:	4a26      	ldr	r2, [pc, #152]	; (8000754 <MX_GPIO_Init+0xa8>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c2:	4b24      	ldr	r3, [pc, #144]	; (8000754 <MX_GPIO_Init+0xa8>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006d0:	4b20      	ldr	r3, [pc, #128]	; (8000754 <MX_GPIO_Init+0xa8>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d6:	4a1f      	ldr	r2, [pc, #124]	; (8000754 <MX_GPIO_Init+0xa8>)
 80006d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <MX_GPIO_Init+0xa8>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <MX_GPIO_Init+0xa8>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f4:	4a17      	ldr	r2, [pc, #92]	; (8000754 <MX_GPIO_Init+0xa8>)
 80006f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_GPIO_Init+0xa8>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_GPIO_Init+0xa8>)
 800070e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000712:	4a10      	ldr	r2, [pc, #64]	; (8000754 <MX_GPIO_Init+0xa8>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000718:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800071c:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <MX_GPIO_Init+0xa8>)
 800071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_GPIO_Init+0xa8>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000730:	4a08      	ldr	r2, [pc, #32]	; (8000754 <MX_GPIO_Init+0xa8>)
 8000732:	f043 0320 	orr.w	r3, r3, #32
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_GPIO_Init+0xa8>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	f003 0320 	and.w	r3, r3, #32
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]

}
 8000748:	bf00      	nop
 800074a:	371c      	adds	r7, #28
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	58024400 	.word	0x58024400

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075c:	f000 fbc0 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000760:	f000 f80e 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000764:	f7ff ffa2 	bl	80006ac <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000768:	f000 f8c4 	bl	80008f4 <MX_QUADSPI_Init>
  MX_UART4_Init();
 800076c:	f000 fac2 	bl	8000cf4 <MX_UART4_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Test();
 8000770:	f7ff ff86 	bl	8000680 <Test>
	  HAL_Delay(550);
 8000774:	f240 2026 	movw	r0, #550	; 0x226
 8000778:	f000 fc44 	bl	8001004 <HAL_Delay>
	  Test();
 800077c:	e7f8      	b.n	8000770 <main+0x18>
	...

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b0cc      	sub	sp, #304	; 0x130
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800078a:	224c      	movs	r2, #76	; 0x4c
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f004 fbca 	bl	8004f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000798:	2220      	movs	r2, #32
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f004 fbc3 	bl	8004f28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	4618      	mov	r0, r3
 80007a8:	23bc      	movs	r3, #188	; 0xbc
 80007aa:	461a      	mov	r2, r3
 80007ac:	2100      	movs	r1, #0
 80007ae:	f004 fbbb 	bl	8004f28 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007b2:	2002      	movs	r0, #2
 80007b4:	f000 fee8 	bl	8001588 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	4b48      	ldr	r3, [pc, #288]	; (80008e0 <SystemClock_Config+0x160>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a47      	ldr	r2, [pc, #284]	; (80008e0 <SystemClock_Config+0x160>)
 80007c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c8:	6193      	str	r3, [r2, #24]
 80007ca:	4b45      	ldr	r3, [pc, #276]	; (80008e0 <SystemClock_Config+0x160>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	4b43      	ldr	r3, [pc, #268]	; (80008e4 <SystemClock_Config+0x164>)
 80007d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007da:	4a42      	ldr	r2, [pc, #264]	; (80008e4 <SystemClock_Config+0x164>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007e2:	4b40      	ldr	r3, [pc, #256]	; (80008e4 <SystemClock_Config+0x164>)
 80007e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e6:	f003 0201 	and.w	r2, r3, #1
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f2:	bf00      	nop
 80007f4:	4b3a      	ldr	r3, [pc, #232]	; (80008e0 <SystemClock_Config+0x160>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000800:	d1f8      	bne.n	80007f4 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000802:	2301      	movs	r3, #1
 8000804:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800080c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	2302      	movs	r3, #2
 8000818:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800081c:	2305      	movs	r3, #5
 800081e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000822:	23c0      	movs	r3, #192	; 0xc0
 8000824:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000828:	2302      	movs	r3, #2
 800082a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 5;
 8000834:	2305      	movs	r3, #5
 8000836:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800083a:	2308      	movs	r3, #8
 800083c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000840:	2300      	movs	r3, #0
 8000842:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000850:	4618      	mov	r0, r3
 8000852:	f000 ff8d 	bl	8001770 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800085c:	f000 f846 	bl	80008ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000860:	233f      	movs	r3, #63	; 0x3f
 8000862:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000866:	2303      	movs	r3, #3
 8000868:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000872:	2308      	movs	r3, #8
 8000874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000878:	2340      	movs	r3, #64	; 0x40
 800087a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800087e:	2340      	movs	r3, #64	; 0x40
 8000880:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000888:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800088c:	2340      	movs	r3, #64	; 0x40
 800088e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000892:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000896:	2104      	movs	r1, #4
 8000898:	4618      	mov	r0, r3
 800089a:	f001 fb79 	bl	8001f90 <HAL_RCC_ClockConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x128>
  {
    Error_Handler();
 80008a4:	f000 f822 	bl	80008ec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_QSPI;
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <SystemClock_Config+0x168>)
 80008ae:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	2200      	movs	r2, #0
 80008b6:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	2200      	movs	r2, #0
 80008be:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 fee7 	bl	8002698 <HAL_RCCEx_PeriphCLKConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0x154>
  {
    Error_Handler();
 80008d0:	f000 f80c 	bl	80008ec <Error_Handler>
  }
}
 80008d4:	bf00      	nop
 80008d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	58024800 	.word	0x58024800
 80008e4:	58000400 	.word	0x58000400
 80008e8:	02000002 	.word	0x02000002

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <Error_Handler+0x6>

080008f4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_QUADSPI_Init+0x50>)
 80008fa:	4a13      	ldr	r2, [pc, #76]	; (8000948 <MX_QUADSPI_Init+0x54>)
 80008fc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_QUADSPI_Init+0x50>)
 8000900:	2201      	movs	r2, #1
 8000902:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_QUADSPI_Init+0x50>)
 8000906:	2204      	movs	r2, #4
 8000908:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_QUADSPI_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_QUADSPI_Init+0x50>)
 8000912:	2216      	movs	r2, #22
 8000914:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_QUADSPI_Init+0x50>)
 8000918:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800091c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_QUADSPI_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_QUADSPI_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_QUADSPI_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_QUADSPI_Init+0x50>)
 8000932:	f000 fe63 	bl	80015fc <HAL_QSPI_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 800093c:	f7ff ffd6 	bl	80008ec <Error_Handler>
  }

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2400009c 	.word	0x2400009c
 8000948:	52005000 	.word	0x52005000

0800094c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a32      	ldr	r2, [pc, #200]	; (8000a34 <HAL_QSPI_MspInit+0xe8>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d15e      	bne.n	8000a2c <HAL_QSPI_MspInit+0xe0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800096e:	4b32      	ldr	r3, [pc, #200]	; (8000a38 <HAL_QSPI_MspInit+0xec>)
 8000970:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000974:	4a30      	ldr	r2, [pc, #192]	; (8000a38 <HAL_QSPI_MspInit+0xec>)
 8000976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800097e:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <HAL_QSPI_MspInit+0xec>)
 8000980:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800098c:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <HAL_QSPI_MspInit+0xec>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000992:	4a29      	ldr	r2, [pc, #164]	; (8000a38 <HAL_QSPI_MspInit+0xec>)
 8000994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000998:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099c:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <HAL_QSPI_MspInit+0xec>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80009aa:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <HAL_QSPI_MspInit+0xec>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b0:	4a21      	ldr	r2, [pc, #132]	; (8000a38 <HAL_QSPI_MspInit+0xec>)
 80009b2:	f043 0320 	orr.w	r3, r3, #32
 80009b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <HAL_QSPI_MspInit+0xec>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c0:	f003 0320 	and.w	r3, r3, #32
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF8     ------> QUADSPI_BK1_IO0
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009c8:	2340      	movs	r3, #64	; 0x40
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80009d8:	230a      	movs	r3, #10
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4816      	ldr	r0, [pc, #88]	; (8000a3c <HAL_QSPI_MspInit+0xf0>)
 80009e4:	f000 fc20 	bl	8001228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80009e8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80009ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80009fa:	2309      	movs	r3, #9
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	480e      	ldr	r0, [pc, #56]	; (8000a40 <HAL_QSPI_MspInit+0xf4>)
 8000a06:	f000 fc0f 	bl	8001228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a1c:	230a      	movs	r3, #10
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	4806      	ldr	r0, [pc, #24]	; (8000a40 <HAL_QSPI_MspInit+0xf4>)
 8000a28:	f000 fbfe 	bl	8001228 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	; 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	52005000 	.word	0x52005000
 8000a38:	58024400 	.word	0x58024400
 8000a3c:	58021800 	.word	0x58021800
 8000a40:	58021400 	.word	0x58021400

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_MspInit+0x30>)
 8000a4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a50:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <HAL_MspInit+0x30>)
 8000a52:	f043 0302 	orr.w	r3, r3, #2
 8000a56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_MspInit+0x30>)
 8000a5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a60:	f003 0302 	and.w	r3, r3, #2
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	58024400 	.word	0x58024400

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 fa7e 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	e00a      	b.n	8000af4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ade:	f3af 8000 	nop.w
 8000ae2:	4601      	mov	r1, r0
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	60ba      	str	r2, [r7, #8]
 8000aea:	b2ca      	uxtb	r2, r1
 8000aec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3301      	adds	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	dbf0      	blt.n	8000ade <_read+0x12>
	}

return len;
 8000afc:	687b      	ldr	r3, [r7, #4]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b2e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_isatty>:

int _isatty(int file)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
	return 1;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f004 f998 	bl	8004ed4 <__errno>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	24080000 	.word	0x24080000
 8000bd0:	00001000 	.word	0x00001000
 8000bd4:	24000090 	.word	0x24000090
 8000bd8:	24000180 	.word	0x24000180

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000be0:	4b39      	ldr	r3, [pc, #228]	; (8000cc8 <SystemInit+0xec>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a38      	ldr	r2, [pc, #224]	; (8000cc8 <SystemInit+0xec>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf0:	4b36      	ldr	r3, [pc, #216]	; (8000ccc <SystemInit+0xf0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f003 030f 	and.w	r3, r3, #15
 8000bf8:	2b06      	cmp	r3, #6
 8000bfa:	d807      	bhi.n	8000c0c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bfc:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <SystemInit+0xf0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f023 030f 	bic.w	r3, r3, #15
 8000c04:	4a31      	ldr	r2, [pc, #196]	; (8000ccc <SystemInit+0xf0>)
 8000c06:	f043 0307 	orr.w	r3, r3, #7
 8000c0a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c0c:	4b30      	ldr	r3, [pc, #192]	; (8000cd0 <SystemInit+0xf4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a2f      	ldr	r2, [pc, #188]	; (8000cd0 <SystemInit+0xf4>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c18:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <SystemInit+0xf4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c1e:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <SystemInit+0xf4>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	492b      	ldr	r1, [pc, #172]	; (8000cd0 <SystemInit+0xf4>)
 8000c24:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <SystemInit+0xf8>)
 8000c26:	4013      	ands	r3, r2
 8000c28:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <SystemInit+0xf0>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	2b07      	cmp	r3, #7
 8000c34:	d907      	bls.n	8000c46 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <SystemInit+0xf0>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f023 030f 	bic.w	r3, r3, #15
 8000c3e:	4a23      	ldr	r2, [pc, #140]	; (8000ccc <SystemInit+0xf0>)
 8000c40:	f043 0307 	orr.w	r3, r3, #7
 8000c44:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c46:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <SystemInit+0xf4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c4c:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <SystemInit+0xf4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c52:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <SystemInit+0xf4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <SystemInit+0xf4>)
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	; (8000cd8 <SystemInit+0xfc>)
 8000c5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <SystemInit+0xf4>)
 8000c60:	4a1e      	ldr	r2, [pc, #120]	; (8000cdc <SystemInit+0x100>)
 8000c62:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <SystemInit+0xf4>)
 8000c66:	4a1e      	ldr	r2, [pc, #120]	; (8000ce0 <SystemInit+0x104>)
 8000c68:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <SystemInit+0xf4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <SystemInit+0xf4>)
 8000c72:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <SystemInit+0x104>)
 8000c74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <SystemInit+0xf4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <SystemInit+0xf4>)
 8000c7e:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <SystemInit+0x104>)
 8000c80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <SystemInit+0xf4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <SystemInit+0xf4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <SystemInit+0xf4>)
 8000c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <SystemInit+0xf4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <SystemInit+0x108>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <SystemInit+0x10c>)
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ca6:	d202      	bcs.n	8000cae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <SystemInit+0x110>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <SystemInit+0x114>)
 8000cb0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000cb4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <SystemInit+0xec>)
 8000cb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cbc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00
 8000ccc:	52002000 	.word	0x52002000
 8000cd0:	58024400 	.word	0x58024400
 8000cd4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cd8:	02020200 	.word	0x02020200
 8000cdc:	01ff0000 	.word	0x01ff0000
 8000ce0:	01010280 	.word	0x01010280
 8000ce4:	5c001000 	.word	0x5c001000
 8000ce8:	ffff0000 	.word	0xffff0000
 8000cec:	51008108 	.word	0x51008108
 8000cf0:	52004000 	.word	0x52004000

08000cf4 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8000cf8:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <MX_UART4_Init+0x90>)
 8000cfa:	4a23      	ldr	r2, [pc, #140]	; (8000d88 <MX_UART4_Init+0x94>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000cfe:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <MX_UART4_Init+0x90>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <MX_UART4_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_UART4_Init+0x90>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <MX_UART4_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_UART4_Init+0x90>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <MX_UART4_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_UART4_Init+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_UART4_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_UART4_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_UART4_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d3c:	4811      	ldr	r0, [pc, #68]	; (8000d84 <MX_UART4_Init+0x90>)
 8000d3e:	f002 ffab 	bl	8003c98 <HAL_UART_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000d48:	f7ff fdd0 	bl	80008ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	480d      	ldr	r0, [pc, #52]	; (8000d84 <MX_UART4_Init+0x90>)
 8000d50:	f003 ffdb 	bl	8004d0a <HAL_UARTEx_SetTxFifoThreshold>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000d5a:	f7ff fdc7 	bl	80008ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4808      	ldr	r0, [pc, #32]	; (8000d84 <MX_UART4_Init+0x90>)
 8000d62:	f004 f810 	bl	8004d86 <HAL_UARTEx_SetRxFifoThreshold>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000d6c:	f7ff fdbe 	bl	80008ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_UART4_Init+0x90>)
 8000d72:	f003 ff91 	bl	8004c98 <HAL_UARTEx_DisableFifoMode>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f7ff fdb6 	bl	80008ec <Error_Handler>
  }

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	240000e8 	.word	0x240000e8
 8000d88:	40004c00 	.word	0x40004c00

08000d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a2a      	ldr	r2, [pc, #168]	; (8000e54 <HAL_UART_MspInit+0xc8>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d14d      	bne.n	8000e4a <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000dae:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <HAL_UART_MspInit+0xcc>)
 8000db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000db4:	4a28      	ldr	r2, [pc, #160]	; (8000e58 <HAL_UART_MspInit+0xcc>)
 8000db6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <HAL_UART_MspInit+0xcc>)
 8000dc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <HAL_UART_MspInit+0xcc>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd2:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <HAL_UART_MspInit+0xcc>)
 8000dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <HAL_UART_MspInit+0xcc>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_UART_MspInit+0xcc>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df0:	4a19      	ldr	r2, [pc, #100]	; (8000e58 <HAL_UART_MspInit+0xcc>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_UART_MspInit+0xcc>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	480d      	ldr	r0, [pc, #52]	; (8000e5c <HAL_UART_MspInit+0xd0>)
 8000e26:	f000 f9ff 	bl	8001228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e3a:	2308      	movs	r3, #8
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4806      	ldr	r0, [pc, #24]	; (8000e60 <HAL_UART_MspInit+0xd4>)
 8000e46:	f000 f9ef 	bl	8001228 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40004c00 	.word	0x40004c00
 8000e58:	58024400 	.word	0x58024400
 8000e5c:	58022000 	.word	0x58022000
 8000e60:	58020000 	.word	0x58020000

08000e64 <_write>:
}

/* USER CODE BEGIN 1 */
#ifdef __GNUC__
int _write(int fd, char *pBuffer, int size)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t *)pBuffer, size, 0xFF);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	23ff      	movs	r3, #255	; 0xff
 8000e76:	68b9      	ldr	r1, [r7, #8]
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <_write+0x24>)
 8000e7a:	f002 ff5d 	bl	8003d38 <HAL_UART_Transmit>
	return size;
 8000e7e:	687b      	ldr	r3, [r7, #4]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	240000e8 	.word	0x240000e8

08000e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e90:	f7ff fea4 	bl	8000bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e96:	e003      	b.n	8000ea0 <LoopCopyDataInit>

08000e98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000e9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e9e:	3104      	adds	r1, #4

08000ea0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ea0:	480a      	ldr	r0, [pc, #40]	; (8000ecc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000ea4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ea6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ea8:	d3f6      	bcc.n	8000e98 <CopyDataInit>
  ldr  r2, =_sbss
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000eac:	e002      	b.n	8000eb4 <LoopFillZerobss>

08000eae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000eae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000eb0:	f842 3b04 	str.w	r3, [r2], #4

08000eb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000eb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000eb8:	d3f9      	bcc.n	8000eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eba:	f004 f811 	bl	8004ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ebe:	f7ff fc4b 	bl	8000758 <main>
  bx  lr    
 8000ec2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ec4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000ec8:	08005e08 	.word	0x08005e08
  ldr  r0, =_sdata
 8000ecc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000ed0:	24000074 	.word	0x24000074
  ldr  r2, =_sbss
 8000ed4:	24000074 	.word	0x24000074
  ldr  r3, = _ebss
 8000ed8:	2400017c 	.word	0x2400017c

08000edc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC3_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f000 f96c 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000eec:	f001 fa06 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 8000ef0:	4601      	mov	r1, r0
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <HAL_Init+0x68>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	0a1b      	lsrs	r3, r3, #8
 8000ef8:	f003 030f 	and.w	r3, r3, #15
 8000efc:	4a13      	ldr	r2, [pc, #76]	; (8000f4c <HAL_Init+0x6c>)
 8000efe:	5cd3      	ldrb	r3, [r2, r3]
 8000f00:	f003 031f 	and.w	r3, r3, #31
 8000f04:	fa21 f303 	lsr.w	r3, r1, r3
 8000f08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <HAL_Init+0x68>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <HAL_Init+0x6c>)
 8000f14:	5cd3      	ldrb	r3, [r2, r3]
 8000f16:	f003 031f 	and.w	r3, r3, #31
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f20:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <HAL_Init+0x70>)
 8000f22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f24:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <HAL_Init+0x74>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f814 	bl	8000f58 <HAL_InitTick>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e002      	b.n	8000f40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3a:	f7ff fd83 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	08005d38 	.word	0x08005d38
 8000f50:	24000004 	.word	0x24000004
 8000f54:	24000000 	.word	0x24000000

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_InitTick+0x60>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e021      	b.n	8000fb0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_InitTick+0x64>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_InitTick+0x60>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f943 	bl	800120e <HAL_SYSTICK_Config>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00e      	b.n	8000fb0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b0f      	cmp	r3, #15
 8000f96:	d80a      	bhi.n	8000fae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f000 f91b 	bl	80011da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa4:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <HAL_InitTick+0x68>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e000      	b.n	8000fb0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2400000c 	.word	0x2400000c
 8000fbc:	24000000 	.word	0x24000000
 8000fc0:	24000008 	.word	0x24000008

08000fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x24>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <HAL_IncTick+0x24>)
 8000fd6:	6013      	str	r3, [r2, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	2400000c 	.word	0x2400000c
 8000fe8:	24000174 	.word	0x24000174

08000fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <HAL_GetTick+0x14>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	24000174 	.word	0x24000174

08001004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff ffee 	bl	8000fec <HAL_GetTick>
 8001010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800101c:	d005      	beq.n	800102a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_Delay+0x40>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102a:	bf00      	nop
 800102c:	f7ff ffde 	bl	8000fec <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	429a      	cmp	r2, r3
 800103a:	d8f7      	bhi.n	800102c <HAL_Delay+0x28>
  {
  }
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2400000c 	.word	0x2400000c

08001048 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_GetREVID+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	0c1b      	lsrs	r3, r3, #16
}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	5c001000 	.word	0x5c001000

08001060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 800108a:	4313      	orrs	r3, r2
 800108c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	60d3      	str	r3, [r2, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00
 80010a4:	05fa0000 	.word	0x05fa0000

080010a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	f003 0307 	and.w	r3, r3, #7
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f7ff ff8e 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff47 	bl	8001060 <__NVIC_SetPriorityGrouping>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011e8:	f7ff ff5e 	bl	80010a8 <__NVIC_GetPriorityGrouping>
 80011ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff ff90 	bl	8001118 <NVIC_EncodePriority>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff5f 	bl	80010c4 <__NVIC_SetPriority>
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffb2 	bl	8001180 <SysTick_Config>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001236:	4b89      	ldr	r3, [pc, #548]	; (800145c <HAL_GPIO_Init+0x234>)
 8001238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800123a:	e194      	b.n	8001566 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2101      	movs	r1, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 8186 	beq.w	8001560 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d00b      	beq.n	8001274 <HAL_GPIO_Init+0x4c>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d007      	beq.n	8001274 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001268:	2b11      	cmp	r3, #17
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2b12      	cmp	r3, #18
 8001272:	d130      	bne.n	80012d6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012aa:	2201      	movs	r2, #1
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	f003 0201 	and.w	r2, r3, #1
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0xee>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b12      	cmp	r3, #18
 8001314:	d123      	bne.n	800135e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	08da      	lsrs	r2, r3, #3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3208      	adds	r2, #8
 800131e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	220f      	movs	r2, #15
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	691a      	ldr	r2, [r3, #16]
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	08da      	lsrs	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3208      	adds	r2, #8
 8001358:	69b9      	ldr	r1, [r7, #24]
 800135a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	2203      	movs	r2, #3
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0203 	and.w	r2, r3, #3
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 80e0 	beq.w	8001560 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a0:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <HAL_GPIO_Init+0x238>)
 80013a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013a6:	4a2e      	ldr	r2, [pc, #184]	; (8001460 <HAL_GPIO_Init+0x238>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013b0:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <HAL_GPIO_Init+0x238>)
 80013b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013be:	4a29      	ldr	r2, [pc, #164]	; (8001464 <HAL_GPIO_Init+0x23c>)
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	089b      	lsrs	r3, r3, #2
 80013c4:	3302      	adds	r3, #2
 80013c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	220f      	movs	r2, #15
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a20      	ldr	r2, [pc, #128]	; (8001468 <HAL_GPIO_Init+0x240>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d052      	beq.n	8001490 <HAL_GPIO_Init+0x268>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a1f      	ldr	r2, [pc, #124]	; (800146c <HAL_GPIO_Init+0x244>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d031      	beq.n	8001456 <HAL_GPIO_Init+0x22e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <HAL_GPIO_Init+0x248>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d02b      	beq.n	8001452 <HAL_GPIO_Init+0x22a>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a1d      	ldr	r2, [pc, #116]	; (8001474 <HAL_GPIO_Init+0x24c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d025      	beq.n	800144e <HAL_GPIO_Init+0x226>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a1c      	ldr	r2, [pc, #112]	; (8001478 <HAL_GPIO_Init+0x250>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d01f      	beq.n	800144a <HAL_GPIO_Init+0x222>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a1b      	ldr	r2, [pc, #108]	; (800147c <HAL_GPIO_Init+0x254>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d019      	beq.n	8001446 <HAL_GPIO_Init+0x21e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a1a      	ldr	r2, [pc, #104]	; (8001480 <HAL_GPIO_Init+0x258>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d013      	beq.n	8001442 <HAL_GPIO_Init+0x21a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a19      	ldr	r2, [pc, #100]	; (8001484 <HAL_GPIO_Init+0x25c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d00d      	beq.n	800143e <HAL_GPIO_Init+0x216>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a18      	ldr	r2, [pc, #96]	; (8001488 <HAL_GPIO_Init+0x260>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d007      	beq.n	800143a <HAL_GPIO_Init+0x212>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a17      	ldr	r2, [pc, #92]	; (800148c <HAL_GPIO_Init+0x264>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d101      	bne.n	8001436 <HAL_GPIO_Init+0x20e>
 8001432:	2309      	movs	r3, #9
 8001434:	e02d      	b.n	8001492 <HAL_GPIO_Init+0x26a>
 8001436:	230a      	movs	r3, #10
 8001438:	e02b      	b.n	8001492 <HAL_GPIO_Init+0x26a>
 800143a:	2308      	movs	r3, #8
 800143c:	e029      	b.n	8001492 <HAL_GPIO_Init+0x26a>
 800143e:	2307      	movs	r3, #7
 8001440:	e027      	b.n	8001492 <HAL_GPIO_Init+0x26a>
 8001442:	2306      	movs	r3, #6
 8001444:	e025      	b.n	8001492 <HAL_GPIO_Init+0x26a>
 8001446:	2305      	movs	r3, #5
 8001448:	e023      	b.n	8001492 <HAL_GPIO_Init+0x26a>
 800144a:	2304      	movs	r3, #4
 800144c:	e021      	b.n	8001492 <HAL_GPIO_Init+0x26a>
 800144e:	2303      	movs	r3, #3
 8001450:	e01f      	b.n	8001492 <HAL_GPIO_Init+0x26a>
 8001452:	2302      	movs	r3, #2
 8001454:	e01d      	b.n	8001492 <HAL_GPIO_Init+0x26a>
 8001456:	2301      	movs	r3, #1
 8001458:	e01b      	b.n	8001492 <HAL_GPIO_Init+0x26a>
 800145a:	bf00      	nop
 800145c:	58000080 	.word	0x58000080
 8001460:	58024400 	.word	0x58024400
 8001464:	58000400 	.word	0x58000400
 8001468:	58020000 	.word	0x58020000
 800146c:	58020400 	.word	0x58020400
 8001470:	58020800 	.word	0x58020800
 8001474:	58020c00 	.word	0x58020c00
 8001478:	58021000 	.word	0x58021000
 800147c:	58021400 	.word	0x58021400
 8001480:	58021800 	.word	0x58021800
 8001484:	58021c00 	.word	0x58021c00
 8001488:	58022000 	.word	0x58022000
 800148c:	58022400 	.word	0x58022400
 8001490:	2300      	movs	r3, #0
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	f002 0203 	and.w	r2, r2, #3
 8001498:	0092      	lsls	r2, r2, #2
 800149a:	4093      	lsls	r3, r2
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a2:	4938      	ldr	r1, [pc, #224]	; (8001584 <HAL_GPIO_Init+0x35c>)
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	3302      	adds	r3, #2
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800152a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	3301      	adds	r3, #1
 8001564:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa22 f303 	lsr.w	r3, r2, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	f47f ae63 	bne.w	800123c <HAL_GPIO_Init+0x14>
  }
}
 8001576:	bf00      	nop
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	58000400 	.word	0x58000400

08001588 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_PWREx_ConfigSupply+0x70>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b04      	cmp	r3, #4
 800159a:	d00a      	beq.n	80015b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800159c:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <HAL_PWREx_ConfigSupply+0x70>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d001      	beq.n	80015ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e01f      	b.n	80015ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e01d      	b.n	80015ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_PWREx_ConfigSupply+0x70>)
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	f023 0207 	bic.w	r2, r3, #7
 80015ba:	490f      	ldr	r1, [pc, #60]	; (80015f8 <HAL_PWREx_ConfigSupply+0x70>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4313      	orrs	r3, r2
 80015c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80015c2:	f7ff fd13 	bl	8000fec <HAL_GetTick>
 80015c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015c8:	e009      	b.n	80015de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015ca:	f7ff fd0f 	bl	8000fec <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015d8:	d901      	bls.n	80015de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e007      	b.n	80015ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_PWREx_ConfigSupply+0x70>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ea:	d1ee      	bne.n	80015ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	58024800 	.word	0x58024800

080015fc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af02      	add	r7, sp, #8
 8001602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff fcf2 	bl	8000fec <HAL_GetTick>
 8001608:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e05f      	b.n	80016d4 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d107      	bne.n	8001630 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff f993 	bl	800094c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001626:	f241 3188 	movw	r1, #5000	; 0x1388
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f85a 	bl	80016e4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	3b01      	subs	r3, #1
 8001640:	021a      	lsls	r2, r3, #8
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	2120      	movs	r1, #32
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f852 	bl	8001700 <QSPI_WaitFlagStateUntilTimeout>
 800165c:	4603      	mov	r3, r0
 800165e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001660:	7afb      	ldrb	r3, [r7, #11]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d135      	bne.n	80016d2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_QSPI_Init+0xe0>)
 800166e:	4013      	ands	r3, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6852      	ldr	r2, [r2, #4]
 8001674:	0611      	lsls	r1, r2, #24
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68d2      	ldr	r2, [r2, #12]
 800167a:	4311      	orrs	r1, r2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	69d2      	ldr	r2, [r2, #28]
 8001680:	4311      	orrs	r1, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6a12      	ldr	r2, [r2, #32]
 8001686:	4311      	orrs	r1, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	430b      	orrs	r3, r1
 800168e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_QSPI_Init+0xe4>)
 8001698:	4013      	ands	r3, r2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6912      	ldr	r2, [r2, #16]
 800169e:	0411      	lsls	r1, r2, #16
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6952      	ldr	r2, [r2, #20]
 80016a4:	4311      	orrs	r1, r2
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6992      	ldr	r2, [r2, #24]
 80016aa:	4311      	orrs	r1, r2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	430b      	orrs	r3, r1
 80016b2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80016d2:	7afb      	ldrb	r3, [r7, #11]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	00ffff2f 	.word	0x00ffff2f
 80016e0:	ffe0f8fe 	.word	0xffe0f8fe

080016e4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	4613      	mov	r3, r2
 800170e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001710:	e01a      	b.n	8001748 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001718:	d016      	beq.n	8001748 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800171a:	f7ff fc67 	bl	8000fec <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	429a      	cmp	r2, r3
 8001728:	d302      	bcc.n	8001730 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10b      	bne.n	8001748 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2204      	movs	r2, #4
 8001734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173c:	f043 0201 	orr.w	r2, r3, #1
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e00e      	b.n	8001766 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	4013      	ands	r3, r2
 8001752:	2b00      	cmp	r3, #0
 8001754:	bf14      	ite	ne
 8001756:	2301      	movne	r3, #1
 8001758:	2300      	moveq	r3, #0
 800175a:	b2db      	uxtb	r3, r3
 800175c:	461a      	mov	r2, r3
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	429a      	cmp	r2, r3
 8001762:	d1d6      	bne.n	8001712 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	; 0x30
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e3ff      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 8087 	beq.w	800189e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001790:	4b99      	ldr	r3, [pc, #612]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800179a:	4b97      	ldr	r3, [pc, #604]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a2:	2b10      	cmp	r3, #16
 80017a4:	d007      	beq.n	80017b6 <HAL_RCC_OscConfig+0x46>
 80017a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a8:	2b18      	cmp	r3, #24
 80017aa:	d110      	bne.n	80017ce <HAL_RCC_OscConfig+0x5e>
 80017ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d10b      	bne.n	80017ce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b6:	4b90      	ldr	r3, [pc, #576]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d06c      	beq.n	800189c <HAL_RCC_OscConfig+0x12c>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d168      	bne.n	800189c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e3d9      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x76>
 80017d8:	4b87      	ldr	r3, [pc, #540]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a86      	ldr	r2, [pc, #536]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 80017de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	e02e      	b.n	8001844 <HAL_RCC_OscConfig+0xd4>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0x98>
 80017ee:	4b82      	ldr	r3, [pc, #520]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a81      	ldr	r2, [pc, #516]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 80017f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b7f      	ldr	r3, [pc, #508]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a7e      	ldr	r2, [pc, #504]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e01d      	b.n	8001844 <HAL_RCC_OscConfig+0xd4>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0xbc>
 8001812:	4b79      	ldr	r3, [pc, #484]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a78      	ldr	r2, [pc, #480]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b76      	ldr	r3, [pc, #472]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a75      	ldr	r2, [pc, #468]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e00b      	b.n	8001844 <HAL_RCC_OscConfig+0xd4>
 800182c:	4b72      	ldr	r3, [pc, #456]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a71      	ldr	r2, [pc, #452]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b6f      	ldr	r3, [pc, #444]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a6e      	ldr	r2, [pc, #440]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 800183e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d013      	beq.n	8001874 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff fbce 	bl	8000fec <HAL_GetTick>
 8001850:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001854:	f7ff fbca 	bl	8000fec <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	; 0x64
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e38d      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001866:	4b64      	ldr	r3, [pc, #400]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0xe4>
 8001872:	e014      	b.n	800189e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff fbba 	bl	8000fec <HAL_GetTick>
 8001878:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff fbb6 	bl	8000fec <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e379      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800188e:	4b5a      	ldr	r3, [pc, #360]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x10c>
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 80ae 	beq.w	8001a08 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ac:	4b52      	ldr	r3, [pc, #328]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018b6:	4b50      	ldr	r3, [pc, #320]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d007      	beq.n	80018d2 <HAL_RCC_OscConfig+0x162>
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	2b18      	cmp	r3, #24
 80018c6:	d13a      	bne.n	800193e <HAL_RCC_OscConfig+0x1ce>
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d135      	bne.n	800193e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d2:	4b49      	ldr	r3, [pc, #292]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_RCC_OscConfig+0x17a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e34b      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ea:	f7ff fbad 	bl	8001048 <HAL_GetREVID>
 80018ee:	4602      	mov	r2, r0
 80018f0:	f241 0303 	movw	r3, #4099	; 0x1003
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d817      	bhi.n	8001928 <HAL_RCC_OscConfig+0x1b8>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	2b40      	cmp	r3, #64	; 0x40
 80018fe:	d108      	bne.n	8001912 <HAL_RCC_OscConfig+0x1a2>
 8001900:	4b3d      	ldr	r3, [pc, #244]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001908:	4a3b      	ldr	r2, [pc, #236]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 800190a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001910:	e07a      	b.n	8001a08 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001912:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	031b      	lsls	r3, r3, #12
 8001920:	4935      	ldr	r1, [pc, #212]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001922:	4313      	orrs	r3, r2
 8001924:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001926:	e06f      	b.n	8001a08 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	4930      	ldr	r1, [pc, #192]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800193c:	e064      	b.n	8001a08 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d045      	beq.n	80019d2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001946:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 0219 	bic.w	r2, r3, #25
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	4929      	ldr	r1, [pc, #164]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff fb48 	bl	8000fec <HAL_GetTick>
 800195c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001960:	f7ff fb44 	bl	8000fec <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e307      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001972:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197e:	f7ff fb63 	bl	8001048 <HAL_GetREVID>
 8001982:	4602      	mov	r2, r0
 8001984:	f241 0303 	movw	r3, #4099	; 0x1003
 8001988:	429a      	cmp	r2, r3
 800198a:	d817      	bhi.n	80019bc <HAL_RCC_OscConfig+0x24c>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	2b40      	cmp	r3, #64	; 0x40
 8001992:	d108      	bne.n	80019a6 <HAL_RCC_OscConfig+0x236>
 8001994:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800199c:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 800199e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a2:	6053      	str	r3, [r2, #4]
 80019a4:	e030      	b.n	8001a08 <HAL_RCC_OscConfig+0x298>
 80019a6:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	031b      	lsls	r3, r3, #12
 80019b4:	4910      	ldr	r1, [pc, #64]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	604b      	str	r3, [r1, #4]
 80019ba:	e025      	b.n	8001a08 <HAL_RCC_OscConfig+0x298>
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	061b      	lsls	r3, r3, #24
 80019ca:	490b      	ldr	r1, [pc, #44]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
 80019d0:	e01a      	b.n	8001a08 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <HAL_RCC_OscConfig+0x288>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff fb05 	bl	8000fec <HAL_GetTick>
 80019e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019e4:	e00a      	b.n	80019fc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e6:	f7ff fb01 	bl	8000fec <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d903      	bls.n	80019fc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e2c4      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
 80019f8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019fc:	4ba4      	ldr	r3, [pc, #656]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1ee      	bne.n	80019e6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0310 	and.w	r3, r3, #16
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80a9 	beq.w	8001b68 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a16:	4b9e      	ldr	r3, [pc, #632]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a20:	4b9b      	ldr	r3, [pc, #620]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d007      	beq.n	8001a3c <HAL_RCC_OscConfig+0x2cc>
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2b18      	cmp	r3, #24
 8001a30:	d13a      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x338>
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d135      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a3c:	4b94      	ldr	r3, [pc, #592]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_OscConfig+0x2e4>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	2b80      	cmp	r3, #128	; 0x80
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e296      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a54:	f7ff faf8 	bl	8001048 <HAL_GetREVID>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d817      	bhi.n	8001a92 <HAL_RCC_OscConfig+0x322>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	2b20      	cmp	r3, #32
 8001a68:	d108      	bne.n	8001a7c <HAL_RCC_OscConfig+0x30c>
 8001a6a:	4b89      	ldr	r3, [pc, #548]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a72:	4a87      	ldr	r2, [pc, #540]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001a74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a78:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a7a:	e075      	b.n	8001b68 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a7c:	4b84      	ldr	r3, [pc, #528]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	069b      	lsls	r3, r3, #26
 8001a8a:	4981      	ldr	r1, [pc, #516]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a90:	e06a      	b.n	8001b68 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a92:	4b7f      	ldr	r3, [pc, #508]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	061b      	lsls	r3, r3, #24
 8001aa0:	497b      	ldr	r1, [pc, #492]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aa6:	e05f      	b.n	8001b68 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d042      	beq.n	8001b36 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ab0:	4b77      	ldr	r3, [pc, #476]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a76      	ldr	r2, [pc, #472]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abc:	f7ff fa96 	bl	8000fec <HAL_GetTick>
 8001ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001ac4:	f7ff fa92 	bl	8000fec <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e255      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ad6:	4b6e      	ldr	r3, [pc, #440]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ae2:	f7ff fab1 	bl	8001048 <HAL_GetREVID>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	f241 0303 	movw	r3, #4099	; 0x1003
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d817      	bhi.n	8001b20 <HAL_RCC_OscConfig+0x3b0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	2b20      	cmp	r3, #32
 8001af6:	d108      	bne.n	8001b0a <HAL_RCC_OscConfig+0x39a>
 8001af8:	4b65      	ldr	r3, [pc, #404]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b00:	4a63      	ldr	r2, [pc, #396]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001b02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b06:	6053      	str	r3, [r2, #4]
 8001b08:	e02e      	b.n	8001b68 <HAL_RCC_OscConfig+0x3f8>
 8001b0a:	4b61      	ldr	r3, [pc, #388]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	069b      	lsls	r3, r3, #26
 8001b18:	495d      	ldr	r1, [pc, #372]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
 8001b1e:	e023      	b.n	8001b68 <HAL_RCC_OscConfig+0x3f8>
 8001b20:	4b5b      	ldr	r3, [pc, #364]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	061b      	lsls	r3, r3, #24
 8001b2e:	4958      	ldr	r1, [pc, #352]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60cb      	str	r3, [r1, #12]
 8001b34:	e018      	b.n	8001b68 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b36:	4b56      	ldr	r3, [pc, #344]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a55      	ldr	r2, [pc, #340]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001b3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7ff fa53 	bl	8000fec <HAL_GetTick>
 8001b46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b4a:	f7ff fa4f 	bl	8000fec <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e212      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b5c:	4b4c      	ldr	r3, [pc, #304]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f0      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d036      	beq.n	8001be2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d019      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7c:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b80:	4a43      	ldr	r2, [pc, #268]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7ff fa30 	bl	8000fec <HAL_GetTick>
 8001b8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b90:	f7ff fa2c 	bl	8000fec <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e1ef      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ba2:	4b3b      	ldr	r3, [pc, #236]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0x420>
 8001bae:	e018      	b.n	8001be2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb0:	4b37      	ldr	r3, [pc, #220]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb4:	4a36      	ldr	r2, [pc, #216]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7ff fa16 	bl	8000fec <HAL_GetTick>
 8001bc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc4:	f7ff fa12 	bl	8000fec <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e1d5      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bd6:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d036      	beq.n	8001c5c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d019      	beq.n	8001c2a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bf6:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a25      	ldr	r2, [pc, #148]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001bfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c02:	f7ff f9f3 	bl	8000fec <HAL_GetTick>
 8001c06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c0a:	f7ff f9ef 	bl	8000fec <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e1b2      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x49a>
 8001c28:	e018      	b.n	8001c5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c2a:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a18      	ldr	r2, [pc, #96]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001c30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c36:	f7ff f9d9 	bl	8000fec <HAL_GetTick>
 8001c3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c3e:	f7ff f9d5 	bl	8000fec <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e198      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <HAL_RCC_OscConfig+0x520>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f0      	bne.n	8001c3e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 8085 	beq.w	8001d74 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_RCC_OscConfig+0x524>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a09      	ldr	r2, [pc, #36]	; (8001c94 <HAL_RCC_OscConfig+0x524>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c76:	f7ff f9b9 	bl	8000fec <HAL_GetTick>
 8001c7a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c7c:	e00c      	b.n	8001c98 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c7e:	f7ff f9b5 	bl	8000fec <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b64      	cmp	r3, #100	; 0x64
 8001c8a:	d905      	bls.n	8001c98 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e178      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
 8001c90:	58024400 	.word	0x58024400
 8001c94:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c98:	4b96      	ldr	r3, [pc, #600]	; (8001ef4 <HAL_RCC_OscConfig+0x784>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0ec      	beq.n	8001c7e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d106      	bne.n	8001cba <HAL_RCC_OscConfig+0x54a>
 8001cac:	4b92      	ldr	r3, [pc, #584]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb0:	4a91      	ldr	r2, [pc, #580]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb8:	e02d      	b.n	8001d16 <HAL_RCC_OscConfig+0x5a6>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x56c>
 8001cc2:	4b8d      	ldr	r3, [pc, #564]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc6:	4a8c      	ldr	r2, [pc, #560]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cce:	4b8a      	ldr	r3, [pc, #552]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	4a89      	ldr	r2, [pc, #548]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001cd4:	f023 0304 	bic.w	r3, r3, #4
 8001cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cda:	e01c      	b.n	8001d16 <HAL_RCC_OscConfig+0x5a6>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	d10c      	bne.n	8001cfe <HAL_RCC_OscConfig+0x58e>
 8001ce4:	4b84      	ldr	r3, [pc, #528]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	4a83      	ldr	r2, [pc, #524]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf0:	4b81      	ldr	r3, [pc, #516]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf4:	4a80      	ldr	r2, [pc, #512]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfc:	e00b      	b.n	8001d16 <HAL_RCC_OscConfig+0x5a6>
 8001cfe:	4b7e      	ldr	r3, [pc, #504]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	4a7d      	ldr	r2, [pc, #500]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001d04:	f023 0301 	bic.w	r3, r3, #1
 8001d08:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0a:	4b7b      	ldr	r3, [pc, #492]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0e:	4a7a      	ldr	r2, [pc, #488]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001d10:	f023 0304 	bic.w	r3, r3, #4
 8001d14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d015      	beq.n	8001d4a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1e:	f7ff f965 	bl	8000fec <HAL_GetTick>
 8001d22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d24:	e00a      	b.n	8001d3c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7ff f961 	bl	8000fec <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e122      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d3c:	4b6e      	ldr	r3, [pc, #440]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0ee      	beq.n	8001d26 <HAL_RCC_OscConfig+0x5b6>
 8001d48:	e014      	b.n	8001d74 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4a:	f7ff f94f 	bl	8000fec <HAL_GetTick>
 8001d4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7ff f94b 	bl	8000fec <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e10c      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d68:	4b63      	ldr	r3, [pc, #396]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ee      	bne.n	8001d52 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 8101 	beq.w	8001f80 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d7e:	4b5e      	ldr	r3, [pc, #376]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d86:	2b18      	cmp	r3, #24
 8001d88:	f000 80bc 	beq.w	8001f04 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	f040 8095 	bne.w	8001ec0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b58      	ldr	r3, [pc, #352]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a57      	ldr	r2, [pc, #348]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001d9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7ff f923 	bl	8000fec <HAL_GetTick>
 8001da6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001daa:	f7ff f91f 	bl	8000fec <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e0e2      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dbc:	4b4e      	ldr	r3, [pc, #312]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc8:	4b4b      	ldr	r3, [pc, #300]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001dca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dcc:	4b4b      	ldr	r3, [pc, #300]	; (8001efc <HAL_RCC_OscConfig+0x78c>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	4946      	ldr	r1, [pc, #280]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	628b      	str	r3, [r1, #40]	; 0x28
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	3b01      	subs	r3, #1
 8001de8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df0:	3b01      	subs	r3, #1
 8001df2:	025b      	lsls	r3, r3, #9
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	041b      	lsls	r3, r3, #16
 8001e00:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	061b      	lsls	r3, r3, #24
 8001e0e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e12:	4939      	ldr	r1, [pc, #228]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001e18:	4b37      	ldr	r3, [pc, #220]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1c:	4a36      	ldr	r2, [pc, #216]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e1e:	f023 0301 	bic.w	r3, r3, #1
 8001e22:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e24:	4b34      	ldr	r3, [pc, #208]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e28:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <HAL_RCC_OscConfig+0x790>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e30:	00d2      	lsls	r2, r2, #3
 8001e32:	4931      	ldr	r1, [pc, #196]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e38:	4b2f      	ldr	r3, [pc, #188]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	f023 020c 	bic.w	r2, r3, #12
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	492c      	ldr	r1, [pc, #176]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	f023 0202 	bic.w	r2, r3, #2
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	4928      	ldr	r1, [pc, #160]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e5c:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	4a25      	ldr	r2, [pc, #148]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e68:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	4a22      	ldr	r2, [pc, #136]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e74:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	4a1c      	ldr	r2, [pc, #112]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7ff f8a8 	bl	8000fec <HAL_GetTick>
 8001e9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7ff f8a4 	bl	8000fec <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e067      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x730>
 8001ebe:	e05f      	b.n	8001f80 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f88e 	bl	8000fec <HAL_GetTick>
 8001ed0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7ff f88a 	bl	8000fec <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e04d      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <HAL_RCC_OscConfig+0x788>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x764>
 8001ef2:	e045      	b.n	8001f80 <HAL_RCC_OscConfig+0x810>
 8001ef4:	58024800 	.word	0x58024800
 8001ef8:	58024400 	.word	0x58024400
 8001efc:	fffffc0c 	.word	0xfffffc0c
 8001f00:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f04:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <HAL_RCC_OscConfig+0x81c>)
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_RCC_OscConfig+0x81c>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d031      	beq.n	8001f7c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	f003 0203 	and.w	r2, r3, #3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d12a      	bne.n	8001f7c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d122      	bne.n	8001f7c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d11a      	bne.n	8001f7c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	0a5b      	lsrs	r3, r3, #9
 8001f4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f52:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d111      	bne.n	8001f7c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	0c1b      	lsrs	r3, r3, #16
 8001f5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f64:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d108      	bne.n	8001f7c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	0e1b      	lsrs	r3, r3, #24
 8001f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f76:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3730      	adds	r7, #48	; 0x30
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	58024400 	.word	0x58024400

08001f90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e19c      	b.n	80022de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b8a      	ldr	r3, [pc, #552]	; (80021d0 <HAL_RCC_ClockConfig+0x240>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d910      	bls.n	8001fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b87      	ldr	r3, [pc, #540]	; (80021d0 <HAL_RCC_ClockConfig+0x240>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 020f 	bic.w	r2, r3, #15
 8001fba:	4985      	ldr	r1, [pc, #532]	; (80021d0 <HAL_RCC_ClockConfig+0x240>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b83      	ldr	r3, [pc, #524]	; (80021d0 <HAL_RCC_ClockConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e184      	b.n	80022de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d010      	beq.n	8002002 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d908      	bls.n	8002002 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ff0:	4b78      	ldr	r3, [pc, #480]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	4975      	ldr	r1, [pc, #468]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d010      	beq.n	8002030 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	4b70      	ldr	r3, [pc, #448]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800201a:	429a      	cmp	r2, r3
 800201c:	d908      	bls.n	8002030 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800201e:	4b6d      	ldr	r3, [pc, #436]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	496a      	ldr	r1, [pc, #424]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 800202c:	4313      	orrs	r3, r2
 800202e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b00      	cmp	r3, #0
 800203a:	d010      	beq.n	800205e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	699a      	ldr	r2, [r3, #24]
 8002040:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002048:	429a      	cmp	r2, r3
 800204a:	d908      	bls.n	800205e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800204c:	4b61      	ldr	r3, [pc, #388]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	495e      	ldr	r1, [pc, #376]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 800205a:	4313      	orrs	r3, r2
 800205c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0320 	and.w	r3, r3, #32
 8002066:	2b00      	cmp	r3, #0
 8002068:	d010      	beq.n	800208c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	4b59      	ldr	r3, [pc, #356]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002076:	429a      	cmp	r2, r3
 8002078:	d908      	bls.n	800208c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800207a:	4b56      	ldr	r3, [pc, #344]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4953      	ldr	r1, [pc, #332]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 8002088:	4313      	orrs	r3, r2
 800208a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d010      	beq.n	80020ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	4b4d      	ldr	r3, [pc, #308]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d908      	bls.n	80020ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a8:	4b4a      	ldr	r3, [pc, #296]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f023 020f 	bic.w	r2, r3, #15
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4947      	ldr	r1, [pc, #284]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d055      	beq.n	8002172 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020c6:	4b43      	ldr	r3, [pc, #268]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	4940      	ldr	r1, [pc, #256]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d107      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020e0:	4b3c      	ldr	r3, [pc, #240]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d121      	bne.n	8002130 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0f6      	b.n	80022de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d107      	bne.n	8002108 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020f8:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d115      	bne.n	8002130 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0ea      	b.n	80022de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d107      	bne.n	8002120 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002110:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d109      	bne.n	8002130 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0de      	b.n	80022de <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002120:	4b2c      	ldr	r3, [pc, #176]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0d6      	b.n	80022de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002130:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	f023 0207 	bic.w	r2, r3, #7
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4925      	ldr	r1, [pc, #148]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 800213e:	4313      	orrs	r3, r2
 8002140:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002142:	f7fe ff53 	bl	8000fec <HAL_GetTick>
 8002146:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002148:	e00a      	b.n	8002160 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214a:	f7fe ff4f 	bl	8000fec <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	; 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e0be      	b.n	80022de <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002160:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	429a      	cmp	r2, r3
 8002170:	d1eb      	bne.n	800214a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d010      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	429a      	cmp	r2, r3
 800218c:	d208      	bcs.n	80021a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f023 020f 	bic.w	r2, r3, #15
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	490e      	ldr	r1, [pc, #56]	; (80021d4 <HAL_RCC_ClockConfig+0x244>)
 800219c:	4313      	orrs	r3, r2
 800219e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_ClockConfig+0x240>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d214      	bcs.n	80021d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_RCC_ClockConfig+0x240>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 020f 	bic.w	r2, r3, #15
 80021b6:	4906      	ldr	r1, [pc, #24]	; (80021d0 <HAL_RCC_ClockConfig+0x240>)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <HAL_RCC_ClockConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e086      	b.n	80022de <HAL_RCC_ClockConfig+0x34e>
 80021d0:	52002000 	.word	0x52002000
 80021d4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d010      	beq.n	8002206 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <HAL_RCC_ClockConfig+0x358>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d208      	bcs.n	8002206 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021f4:	4b3c      	ldr	r3, [pc, #240]	; (80022e8 <HAL_RCC_ClockConfig+0x358>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	4939      	ldr	r1, [pc, #228]	; (80022e8 <HAL_RCC_ClockConfig+0x358>)
 8002202:	4313      	orrs	r3, r2
 8002204:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d010      	beq.n	8002234 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <HAL_RCC_ClockConfig+0x358>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800221e:	429a      	cmp	r2, r3
 8002220:	d208      	bcs.n	8002234 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002222:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <HAL_RCC_ClockConfig+0x358>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	492e      	ldr	r1, [pc, #184]	; (80022e8 <HAL_RCC_ClockConfig+0x358>)
 8002230:	4313      	orrs	r3, r2
 8002232:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b00      	cmp	r3, #0
 800223e:	d010      	beq.n	8002262 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	699a      	ldr	r2, [r3, #24]
 8002244:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <HAL_RCC_ClockConfig+0x358>)
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800224c:	429a      	cmp	r2, r3
 800224e:	d208      	bcs.n	8002262 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002250:	4b25      	ldr	r3, [pc, #148]	; (80022e8 <HAL_RCC_ClockConfig+0x358>)
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	4922      	ldr	r1, [pc, #136]	; (80022e8 <HAL_RCC_ClockConfig+0x358>)
 800225e:	4313      	orrs	r3, r2
 8002260:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b00      	cmp	r3, #0
 800226c:	d010      	beq.n	8002290 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_RCC_ClockConfig+0x358>)
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800227a:	429a      	cmp	r2, r3
 800227c:	d208      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800227e:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <HAL_RCC_ClockConfig+0x358>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	4917      	ldr	r1, [pc, #92]	; (80022e8 <HAL_RCC_ClockConfig+0x358>)
 800228c:	4313      	orrs	r3, r2
 800228e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002290:	f000 f834 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 8002294:	4601      	mov	r1, r0
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <HAL_RCC_ClockConfig+0x358>)
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	4a12      	ldr	r2, [pc, #72]	; (80022ec <HAL_RCC_ClockConfig+0x35c>)
 80022a2:	5cd3      	ldrb	r3, [r2, r3]
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	fa21 f303 	lsr.w	r3, r1, r3
 80022ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_RCC_ClockConfig+0x358>)
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	4a0d      	ldr	r2, [pc, #52]	; (80022ec <HAL_RCC_ClockConfig+0x35c>)
 80022b8:	5cd3      	ldrb	r3, [r2, r3]
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
 80022c4:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <HAL_RCC_ClockConfig+0x360>)
 80022c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022c8:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <HAL_RCC_ClockConfig+0x364>)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_RCC_ClockConfig+0x368>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe fe40 	bl	8000f58 <HAL_InitTick>
 80022d8:	4603      	mov	r3, r0
 80022da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	58024400 	.word	0x58024400
 80022ec:	08005d38 	.word	0x08005d38
 80022f0:	24000004 	.word	0x24000004
 80022f4:	24000000 	.word	0x24000000
 80022f8:	24000008 	.word	0x24000008

080022fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002302:	4baf      	ldr	r3, [pc, #700]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800230a:	2b18      	cmp	r3, #24
 800230c:	f200 814e 	bhi.w	80025ac <HAL_RCC_GetSysClockFreq+0x2b0>
 8002310:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002316:	bf00      	nop
 8002318:	0800237d 	.word	0x0800237d
 800231c:	080025ad 	.word	0x080025ad
 8002320:	080025ad 	.word	0x080025ad
 8002324:	080025ad 	.word	0x080025ad
 8002328:	080025ad 	.word	0x080025ad
 800232c:	080025ad 	.word	0x080025ad
 8002330:	080025ad 	.word	0x080025ad
 8002334:	080025ad 	.word	0x080025ad
 8002338:	080023a3 	.word	0x080023a3
 800233c:	080025ad 	.word	0x080025ad
 8002340:	080025ad 	.word	0x080025ad
 8002344:	080025ad 	.word	0x080025ad
 8002348:	080025ad 	.word	0x080025ad
 800234c:	080025ad 	.word	0x080025ad
 8002350:	080025ad 	.word	0x080025ad
 8002354:	080025ad 	.word	0x080025ad
 8002358:	080023a9 	.word	0x080023a9
 800235c:	080025ad 	.word	0x080025ad
 8002360:	080025ad 	.word	0x080025ad
 8002364:	080025ad 	.word	0x080025ad
 8002368:	080025ad 	.word	0x080025ad
 800236c:	080025ad 	.word	0x080025ad
 8002370:	080025ad 	.word	0x080025ad
 8002374:	080025ad 	.word	0x080025ad
 8002378:	080023af 	.word	0x080023af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800237c:	4b90      	ldr	r3, [pc, #576]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b00      	cmp	r3, #0
 8002386:	d009      	beq.n	800239c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002388:	4b8d      	ldr	r3, [pc, #564]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	08db      	lsrs	r3, r3, #3
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	4a8c      	ldr	r2, [pc, #560]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
 8002398:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800239a:	e10a      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800239c:	4b89      	ldr	r3, [pc, #548]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800239e:	61bb      	str	r3, [r7, #24]
    break;
 80023a0:	e107      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80023a2:	4b89      	ldr	r3, [pc, #548]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80023a4:	61bb      	str	r3, [r7, #24]
    break;
 80023a6:	e104      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80023a8:	4b88      	ldr	r3, [pc, #544]	; (80025cc <HAL_RCC_GetSysClockFreq+0x2d0>)
 80023aa:	61bb      	str	r3, [r7, #24]
    break;
 80023ac:	e101      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023ae:	4b84      	ldr	r3, [pc, #528]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80023b8:	4b81      	ldr	r3, [pc, #516]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023c4:	4b7e      	ldr	r3, [pc, #504]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80023ce:	4b7c      	ldr	r3, [pc, #496]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d2:	08db      	lsrs	r3, r3, #3
 80023d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	fb02 f303 	mul.w	r3, r2, r3
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80da 	beq.w	80025a6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d05a      	beq.n	80024ae <HAL_RCC_GetSysClockFreq+0x1b2>
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d302      	bcc.n	8002402 <HAL_RCC_GetSysClockFreq+0x106>
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d078      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002400:	e099      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002402:	4b6f      	ldr	r3, [pc, #444]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	d02d      	beq.n	800246a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800240e:	4b6c      	ldr	r3, [pc, #432]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	08db      	lsrs	r3, r3, #3
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	4a6a      	ldr	r2, [pc, #424]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800241a:	fa22 f303 	lsr.w	r3, r2, r3
 800241e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	ee07 3a90 	vmov	s15, r3
 8002430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002438:	4b61      	ldr	r3, [pc, #388]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002440:	ee07 3a90 	vmov	s15, r3
 8002444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002448:	ed97 6a02 	vldr	s12, [r7, #8]
 800244c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80025d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002450:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002454:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002458:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800245c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002464:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002468:	e087      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	ee07 3a90 	vmov	s15, r3
 8002470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002474:	eddf 6a57 	vldr	s13, [pc, #348]	; 80025d4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800247c:	4b50      	ldr	r3, [pc, #320]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002484:	ee07 3a90 	vmov	s15, r3
 8002488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800248c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002490:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80025d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002494:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002498:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800249c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024ac:	e065      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	ee07 3a90 	vmov	s15, r3
 80024b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b8:	eddf 6a47 	vldr	s13, [pc, #284]	; 80025d8 <HAL_RCC_GetSysClockFreq+0x2dc>
 80024bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024c0:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80024d4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80025d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80024d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024f0:	e043      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fc:	eddf 6a37 	vldr	s13, [pc, #220]	; 80025dc <HAL_RCC_GetSysClockFreq+0x2e0>
 8002500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002504:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002514:	ed97 6a02 	vldr	s12, [r7, #8]
 8002518:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80025d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 800251c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002520:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002524:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800252c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002530:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002534:	e021      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	ee07 3a90 	vmov	s15, r3
 800253c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002540:	eddf 6a25 	vldr	s13, [pc, #148]	; 80025d8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002548:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002558:	ed97 6a02 	vldr	s12, [r7, #8]
 800255c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80025d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002560:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002564:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800256c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002574:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002578:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	0a5b      	lsrs	r3, r3, #9
 8002580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002584:	3301      	adds	r3, #1
 8002586:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002592:	edd7 6a07 	vldr	s13, [r7, #28]
 8002596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800259a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800259e:	ee17 3a90 	vmov	r3, s15
 80025a2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80025a4:	e005      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]
    break;
 80025aa:	e002      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80025ae:	61bb      	str	r3, [r7, #24]
    break;
 80025b0:	bf00      	nop
  }

  return sysclockfreq;
 80025b2:	69bb      	ldr	r3, [r7, #24]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3724      	adds	r7, #36	; 0x24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	58024400 	.word	0x58024400
 80025c4:	03d09000 	.word	0x03d09000
 80025c8:	003d0900 	.word	0x003d0900
 80025cc:	017d7840 	.word	0x017d7840
 80025d0:	46000000 	.word	0x46000000
 80025d4:	4c742400 	.word	0x4c742400
 80025d8:	4a742400 	.word	0x4a742400
 80025dc:	4bbebc20 	.word	0x4bbebc20

080025e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80025e6:	f7ff fe89 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 80025ea:	4601      	mov	r1, r0
 80025ec:	4b10      	ldr	r3, [pc, #64]	; (8002630 <HAL_RCC_GetHCLKFreq+0x50>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	4a0f      	ldr	r2, [pc, #60]	; (8002634 <HAL_RCC_GetHCLKFreq+0x54>)
 80025f8:	5cd3      	ldrb	r3, [r2, r3]
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002602:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <HAL_RCC_GetHCLKFreq+0x50>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	4a09      	ldr	r2, [pc, #36]	; (8002634 <HAL_RCC_GetHCLKFreq+0x54>)
 800260e:	5cd3      	ldrb	r3, [r2, r3]
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	fa22 f303 	lsr.w	r3, r2, r3
 800261a:	4a07      	ldr	r2, [pc, #28]	; (8002638 <HAL_RCC_GetHCLKFreq+0x58>)
 800261c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800261e:	4a07      	ldr	r2, [pc, #28]	; (800263c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <HAL_RCC_GetHCLKFreq+0x58>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	58024400 	.word	0x58024400
 8002634:	08005d38 	.word	0x08005d38
 8002638:	24000004 	.word	0x24000004
 800263c:	24000000 	.word	0x24000000

08002640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002644:	f7ff ffcc 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8002648:	4601      	mov	r1, r0
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x24>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	58024400 	.word	0x58024400
 8002668:	08005d38 	.word	0x08005d38

0800266c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002670:	f7ff ffb6 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 8002674:	4601      	mov	r1, r0
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002682:	5cd3      	ldrb	r3, [r2, r3]
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800268c:	4618      	mov	r0, r3
 800268e:	bd80      	pop	{r7, pc}
 8002690:	58024400 	.word	0x58024400
 8002694:	08005d38 	.word	0x08005d38

08002698 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026a0:	2300      	movs	r3, #0
 80026a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026a4:	2300      	movs	r3, #0
 80026a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d03d      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026bc:	d013      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80026be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026c2:	d802      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x32>
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80026c8:	e01f      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80026ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026ce:	d013      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80026d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026d4:	d01c      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80026d6:	e018      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026d8:	4baf      	ldr	r3, [pc, #700]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	4aae      	ldr	r2, [pc, #696]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026e4:	e015      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2102      	movs	r1, #2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f001 f96f 	bl	80039d0 <RCCEx_PLL2_Config>
 80026f2:	4603      	mov	r3, r0
 80026f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026f6:	e00c      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3324      	adds	r3, #36	; 0x24
 80026fc:	2102      	movs	r1, #2
 80026fe:	4618      	mov	r0, r3
 8002700:	f001 fa18 	bl	8003b34 <RCCEx_PLL3_Config>
 8002704:	4603      	mov	r3, r0
 8002706:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002708:	e003      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	75fb      	strb	r3, [r7, #23]
      break;
 800270e:	e000      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002712:	7dfb      	ldrb	r3, [r7, #23]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d109      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002718:	4b9f      	ldr	r3, [pc, #636]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800271a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002724:	499c      	ldr	r1, [pc, #624]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002726:	4313      	orrs	r3, r2
 8002728:	650b      	str	r3, [r1, #80]	; 0x50
 800272a:	e001      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800272c:	7dfb      	ldrb	r3, [r7, #23]
 800272e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d03d      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002740:	2b04      	cmp	r3, #4
 8002742:	d826      	bhi.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002744:	a201      	add	r2, pc, #4	; (adr r2, 800274c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8002746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274a:	bf00      	nop
 800274c:	08002761 	.word	0x08002761
 8002750:	0800276f 	.word	0x0800276f
 8002754:	08002781 	.word	0x08002781
 8002758:	08002799 	.word	0x08002799
 800275c:	08002799 	.word	0x08002799
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002760:	4b8d      	ldr	r3, [pc, #564]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	4a8c      	ldr	r2, [pc, #560]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800276a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800276c:	e015      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3304      	adds	r3, #4
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f001 f92b 	bl	80039d0 <RCCEx_PLL2_Config>
 800277a:	4603      	mov	r3, r0
 800277c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800277e:	e00c      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3324      	adds	r3, #36	; 0x24
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f001 f9d4 	bl	8003b34 <RCCEx_PLL3_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002790:	e003      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	75fb      	strb	r3, [r7, #23]
      break;
 8002796:	e000      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800279a:	7dfb      	ldrb	r3, [r7, #23]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d109      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027a0:	4b7d      	ldr	r3, [pc, #500]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a4:	f023 0207 	bic.w	r2, r3, #7
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ac:	497a      	ldr	r1, [pc, #488]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	650b      	str	r3, [r1, #80]	; 0x50
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b4:	7dfb      	ldrb	r3, [r7, #23]
 80027b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d03e      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	2b80      	cmp	r3, #128	; 0x80
 80027ca:	d01c      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80027cc:	2b80      	cmp	r3, #128	; 0x80
 80027ce:	d804      	bhi.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x142>
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80027d4:	2b40      	cmp	r3, #64	; 0x40
 80027d6:	d00d      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80027d8:	e01e      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80027da:	2bc0      	cmp	r3, #192	; 0xc0
 80027dc:	d01f      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80027de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e2:	d01e      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80027e4:	e018      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027e6:	4b6c      	ldr	r3, [pc, #432]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	4a6b      	ldr	r2, [pc, #428]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80027f2:	e017      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3304      	adds	r3, #4
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 f8e8 	bl	80039d0 <RCCEx_PLL2_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002804:	e00e      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3324      	adds	r3, #36	; 0x24
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f001 f991 	bl	8003b34 <RCCEx_PLL3_Config>
 8002812:	4603      	mov	r3, r0
 8002814:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002816:	e005      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	75fb      	strb	r3, [r7, #23]
      break;
 800281c:	e002      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800281e:	bf00      	nop
 8002820:	e000      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002824:	7dfb      	ldrb	r3, [r7, #23]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800282a:	4b5b      	ldr	r3, [pc, #364]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800282c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	4958      	ldr	r1, [pc, #352]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002838:	4313      	orrs	r3, r2
 800283a:	650b      	str	r3, [r1, #80]	; 0x50
 800283c:	e001      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800283e:	7dfb      	ldrb	r3, [r7, #23]
 8002840:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284a:	2b00      	cmp	r3, #0
 800284c:	d044      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002858:	d01f      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800285a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800285e:	d805      	bhi.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002864:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002868:	d00e      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800286a:	e01f      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x214>
 800286c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002870:	d01f      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002872:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002876:	d01e      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002878:	e018      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800287a:	4b47      	ldr	r3, [pc, #284]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287e:	4a46      	ldr	r2, [pc, #280]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002884:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002886:	e017      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3304      	adds	r3, #4
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f001 f89e 	bl	80039d0 <RCCEx_PLL2_Config>
 8002894:	4603      	mov	r3, r0
 8002896:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002898:	e00e      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3324      	adds	r3, #36	; 0x24
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f001 f947 	bl	8003b34 <RCCEx_PLL3_Config>
 80028a6:	4603      	mov	r3, r0
 80028a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028aa:	e005      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	75fb      	strb	r3, [r7, #23]
      break;
 80028b0:	e002      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80028b2:	bf00      	nop
 80028b4:	e000      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80028b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10a      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80028be:	4b36      	ldr	r3, [pc, #216]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028cc:	4932      	ldr	r1, [pc, #200]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	658b      	str	r3, [r1, #88]	; 0x58
 80028d2:	e001      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
 80028d6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d044      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028ee:	d01f      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80028f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028f4:	d805      	bhi.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80028fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028fe:	d00e      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002900:	e01f      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002902:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002906:	d01f      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800290c:	d01e      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800290e:	e018      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002910:	4b21      	ldr	r3, [pc, #132]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	4a20      	ldr	r2, [pc, #128]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800291c:	e017      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	2100      	movs	r1, #0
 8002924:	4618      	mov	r0, r3
 8002926:	f001 f853 	bl	80039d0 <RCCEx_PLL2_Config>
 800292a:	4603      	mov	r3, r0
 800292c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800292e:	e00e      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3324      	adds	r3, #36	; 0x24
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f001 f8fc 	bl	8003b34 <RCCEx_PLL3_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002940:	e005      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	75fb      	strb	r3, [r7, #23]
      break;
 8002946:	e002      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002948:	bf00      	nop
 800294a:	e000      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800294c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800294e:	7dfb      	ldrb	r3, [r7, #23]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002954:	4b10      	ldr	r3, [pc, #64]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002962:	490d      	ldr	r1, [pc, #52]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002964:	4313      	orrs	r3, r2
 8002966:	658b      	str	r3, [r1, #88]	; 0x58
 8002968:	e001      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296a:	7dfb      	ldrb	r3, [r7, #23]
 800296c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d035      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297e:	2b10      	cmp	r3, #16
 8002980:	d00c      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002982:	2b10      	cmp	r3, #16
 8002984:	d802      	bhi.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002986:	2b00      	cmp	r3, #0
 8002988:	d01b      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800298a:	e017      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x324>
 800298c:	2b20      	cmp	r3, #32
 800298e:	d00c      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002990:	2b30      	cmp	r3, #48	; 0x30
 8002992:	d018      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002994:	e012      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002996:	bf00      	nop
 8002998:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800299c:	4baf      	ldr	r3, [pc, #700]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	4aae      	ldr	r2, [pc, #696]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80029a8:	e00e      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3304      	adds	r3, #4
 80029ae:	2102      	movs	r1, #2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f001 f80d 	bl	80039d0 <RCCEx_PLL2_Config>
 80029b6:	4603      	mov	r3, r0
 80029b8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80029ba:	e005      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	75fb      	strb	r3, [r7, #23]
      break;
 80029c0:	e002      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80029c2:	bf00      	nop
 80029c4:	e000      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80029c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029c8:	7dfb      	ldrb	r3, [r7, #23]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029ce:	4ba3      	ldr	r3, [pc, #652]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029da:	49a0      	ldr	r1, [pc, #640]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80029e0:	e001      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
 80029e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d042      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029fa:	d01f      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80029fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a00:	d805      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0a:	d00e      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002a0c:	e01f      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002a0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a12:	d01f      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002a14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a18:	d01e      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002a1a:	e018      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a1c:	4b8f      	ldr	r3, [pc, #572]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	4a8e      	ldr	r2, [pc, #568]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a28:	e017      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 ffcd 	bl	80039d0 <RCCEx_PLL2_Config>
 8002a36:	4603      	mov	r3, r0
 8002a38:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a3a:	e00e      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3324      	adds	r3, #36	; 0x24
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f001 f876 	bl	8003b34 <RCCEx_PLL3_Config>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a4c:	e005      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	75fb      	strb	r3, [r7, #23]
      break;
 8002a52:	e002      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002a54:	bf00      	nop
 8002a56:	e000      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a5a:	7dfb      	ldrb	r3, [r7, #23]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a60:	4b7e      	ldr	r3, [pc, #504]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a64:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	497b      	ldr	r1, [pc, #492]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	650b      	str	r3, [r1, #80]	; 0x50
 8002a72:	e001      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
 8002a76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d042      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a8c:	d01b      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a92:	d805      	bhi.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d022      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002a9e:	e01b      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002aa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002aa4:	d01d      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002aa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aaa:	d01c      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002aac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ab0:	d01b      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002ab2:	e011      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	2101      	movs	r1, #1
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 ff88 	bl	80039d0 <RCCEx_PLL2_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002ac4:	e012      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3324      	adds	r3, #36	; 0x24
 8002aca:	2101      	movs	r1, #1
 8002acc:	4618      	mov	r0, r3
 8002ace:	f001 f831 	bl	8003b34 <RCCEx_PLL3_Config>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002ad6:	e009      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	75fb      	strb	r3, [r7, #23]
      break;
 8002adc:	e006      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e004      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002ae2:	bf00      	nop
 8002ae4:	e002      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002ae6:	bf00      	nop
 8002ae8:	e000      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002af2:	4b5a      	ldr	r3, [pc, #360]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afe:	4957      	ldr	r1, [pc, #348]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	650b      	str	r3, [r1, #80]	; 0x50
 8002b04:	e001      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
 8002b08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d044      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b20:	d01b      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b26:	d805      	bhi.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d022      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002b2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b30:	d00a      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002b32:	e01b      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b38:	d01d      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b3e:	d01c      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002b40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b44:	d01b      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002b46:	e011      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 ff3e 	bl	80039d0 <RCCEx_PLL2_Config>
 8002b54:	4603      	mov	r3, r0
 8002b56:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b58:	e012      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3324      	adds	r3, #36	; 0x24
 8002b5e:	2101      	movs	r1, #1
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 ffe7 	bl	8003b34 <RCCEx_PLL3_Config>
 8002b66:	4603      	mov	r3, r0
 8002b68:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b6a:	e009      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b70:	e006      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b72:	bf00      	nop
 8002b74:	e004      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b76:	bf00      	nop
 8002b78:	e002      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b7a:	bf00      	nop
 8002b7c:	e000      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b80:	7dfb      	ldrb	r3, [r7, #23]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10a      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b86:	4b35      	ldr	r3, [pc, #212]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b94:	4931      	ldr	r1, [pc, #196]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	658b      	str	r3, [r1, #88]	; 0x58
 8002b9a:	e001      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9c:	7dfb      	ldrb	r3, [r7, #23]
 8002b9e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d02d      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bb4:	d005      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002bb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bba:	d009      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d013      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002bc0:	e00f      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc2:	4b26      	ldr	r3, [pc, #152]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	4a25      	ldr	r2, [pc, #148]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002bce:	e00c      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fefa 	bl	80039d0 <RCCEx_PLL2_Config>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002be0:	e003      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	75fb      	strb	r3, [r7, #23]
      break;
 8002be6:	e000      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002be8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d109      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bfc:	4917      	ldr	r1, [pc, #92]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	650b      	str	r3, [r1, #80]	; 0x50
 8002c02:	e001      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c04:	7dfb      	ldrb	r3, [r7, #23]
 8002c06:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d035      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d81b      	bhi.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002c1c:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c22:	bf00      	nop
 8002c24:	08002c61 	.word	0x08002c61
 8002c28:	08002c35 	.word	0x08002c35
 8002c2c:	08002c43 	.word	0x08002c43
 8002c30:	08002c61 	.word	0x08002c61
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	4a08      	ldr	r2, [pc, #32]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c40:	e00f      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3304      	adds	r3, #4
 8002c46:	2102      	movs	r1, #2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 fec1 	bl	80039d0 <RCCEx_PLL2_Config>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c52:	e006      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	75fb      	strb	r3, [r7, #23]
      break;
 8002c58:	e003      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002c5a:	bf00      	nop
 8002c5c:	58024400 	.word	0x58024400
      break;
 8002c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d109      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c68:	4bba      	ldr	r3, [pc, #744]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6c:	f023 0203 	bic.w	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c74:	49b7      	ldr	r1, [pc, #732]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c7a:	e001      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7c:	7dfb      	ldrb	r3, [r7, #23]
 8002c7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8086 	beq.w	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c8e:	4bb2      	ldr	r3, [pc, #712]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4ab1      	ldr	r2, [pc, #708]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c9a:	f7fe f9a7 	bl	8000fec <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ca0:	e009      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca2:	f7fe f9a3 	bl	8000fec <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b64      	cmp	r3, #100	; 0x64
 8002cae:	d902      	bls.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	75fb      	strb	r3, [r7, #23]
        break;
 8002cb4:	e005      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cb6:	4ba8      	ldr	r3, [pc, #672]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0ef      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d166      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002cc8:	4ba2      	ldr	r3, [pc, #648]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cd2:	4053      	eors	r3, r2
 8002cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d013      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cdc:	4b9d      	ldr	r3, [pc, #628]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ce6:	4b9b      	ldr	r3, [pc, #620]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	4a9a      	ldr	r2, [pc, #616]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf2:	4b98      	ldr	r3, [pc, #608]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	4a97      	ldr	r2, [pc, #604]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002cfe:	4a95      	ldr	r2, [pc, #596]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0e:	d115      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fe f96c 	bl	8000fec <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d16:	e00b      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d18:	f7fe f968 	bl	8000fec <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d902      	bls.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	75fb      	strb	r3, [r7, #23]
            break;
 8002d2e:	e005      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d30:	4b88      	ldr	r3, [pc, #544]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0ed      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d126      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d50:	d10d      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002d52:	4b80      	ldr	r3, [pc, #512]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d60:	0919      	lsrs	r1, r3, #4
 8002d62:	4b7e      	ldr	r3, [pc, #504]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002d64:	400b      	ands	r3, r1
 8002d66:	497b      	ldr	r1, [pc, #492]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	610b      	str	r3, [r1, #16]
 8002d6c:	e005      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002d6e:	4b79      	ldr	r3, [pc, #484]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	4a78      	ldr	r2, [pc, #480]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d74:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d78:	6113      	str	r3, [r2, #16]
 8002d7a:	4b76      	ldr	r3, [pc, #472]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d88:	4972      	ldr	r1, [pc, #456]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	670b      	str	r3, [r1, #112]	; 0x70
 8002d8e:	e004      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
 8002d92:	75bb      	strb	r3, [r7, #22]
 8002d94:	e001      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
 8002d98:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d07d      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002daa:	2b28      	cmp	r3, #40	; 0x28
 8002dac:	d866      	bhi.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002dae:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002e83 	.word	0x08002e83
 8002db8:	08002e7d 	.word	0x08002e7d
 8002dbc:	08002e7d 	.word	0x08002e7d
 8002dc0:	08002e7d 	.word	0x08002e7d
 8002dc4:	08002e7d 	.word	0x08002e7d
 8002dc8:	08002e7d 	.word	0x08002e7d
 8002dcc:	08002e7d 	.word	0x08002e7d
 8002dd0:	08002e7d 	.word	0x08002e7d
 8002dd4:	08002e59 	.word	0x08002e59
 8002dd8:	08002e7d 	.word	0x08002e7d
 8002ddc:	08002e7d 	.word	0x08002e7d
 8002de0:	08002e7d 	.word	0x08002e7d
 8002de4:	08002e7d 	.word	0x08002e7d
 8002de8:	08002e7d 	.word	0x08002e7d
 8002dec:	08002e7d 	.word	0x08002e7d
 8002df0:	08002e7d 	.word	0x08002e7d
 8002df4:	08002e6b 	.word	0x08002e6b
 8002df8:	08002e7d 	.word	0x08002e7d
 8002dfc:	08002e7d 	.word	0x08002e7d
 8002e00:	08002e7d 	.word	0x08002e7d
 8002e04:	08002e7d 	.word	0x08002e7d
 8002e08:	08002e7d 	.word	0x08002e7d
 8002e0c:	08002e7d 	.word	0x08002e7d
 8002e10:	08002e7d 	.word	0x08002e7d
 8002e14:	08002e83 	.word	0x08002e83
 8002e18:	08002e7d 	.word	0x08002e7d
 8002e1c:	08002e7d 	.word	0x08002e7d
 8002e20:	08002e7d 	.word	0x08002e7d
 8002e24:	08002e7d 	.word	0x08002e7d
 8002e28:	08002e7d 	.word	0x08002e7d
 8002e2c:	08002e7d 	.word	0x08002e7d
 8002e30:	08002e7d 	.word	0x08002e7d
 8002e34:	08002e83 	.word	0x08002e83
 8002e38:	08002e7d 	.word	0x08002e7d
 8002e3c:	08002e7d 	.word	0x08002e7d
 8002e40:	08002e7d 	.word	0x08002e7d
 8002e44:	08002e7d 	.word	0x08002e7d
 8002e48:	08002e7d 	.word	0x08002e7d
 8002e4c:	08002e7d 	.word	0x08002e7d
 8002e50:	08002e7d 	.word	0x08002e7d
 8002e54:	08002e83 	.word	0x08002e83
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fdb6 	bl	80039d0 <RCCEx_PLL2_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e68:	e00c      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3324      	adds	r3, #36	; 0x24
 8002e6e:	2101      	movs	r1, #1
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fe5f 	bl	8003b34 <RCCEx_PLL3_Config>
 8002e76:	4603      	mov	r3, r0
 8002e78:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e7a:	e003      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e80:	e000      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002e82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e8a:	4b32      	ldr	r3, [pc, #200]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e96:	492f      	ldr	r1, [pc, #188]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	654b      	str	r3, [r1, #84]	; 0x54
 8002e9c:	e001      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ea0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d037      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d820      	bhi.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002eb6:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebc:	08002eff 	.word	0x08002eff
 8002ec0:	08002ed5 	.word	0x08002ed5
 8002ec4:	08002ee7 	.word	0x08002ee7
 8002ec8:	08002eff 	.word	0x08002eff
 8002ecc:	08002eff 	.word	0x08002eff
 8002ed0:	08002eff 	.word	0x08002eff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	2101      	movs	r1, #1
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fd78 	bl	80039d0 <RCCEx_PLL2_Config>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ee4:	e00c      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3324      	adds	r3, #36	; 0x24
 8002eea:	2101      	movs	r1, #1
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 fe21 	bl	8003b34 <RCCEx_PLL3_Config>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ef6:	e003      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	75fb      	strb	r3, [r7, #23]
      break;
 8002efc:	e000      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f06:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	f023 0207 	bic.w	r2, r3, #7
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f12:	4910      	ldr	r1, [pc, #64]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	654b      	str	r3, [r1, #84]	; 0x54
 8002f18:	e001      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
 8002f1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d040      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	d827      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002f34:	a201      	add	r2, pc, #4	; (adr r2, 8002f3c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3a:	bf00      	nop
 8002f3c:	08002f8b 	.word	0x08002f8b
 8002f40:	08002f61 	.word	0x08002f61
 8002f44:	08002f73 	.word	0x08002f73
 8002f48:	08002f8b 	.word	0x08002f8b
 8002f4c:	08002f8b 	.word	0x08002f8b
 8002f50:	08002f8b 	.word	0x08002f8b
 8002f54:	58024400 	.word	0x58024400
 8002f58:	58024800 	.word	0x58024800
 8002f5c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	2101      	movs	r1, #1
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fd32 	bl	80039d0 <RCCEx_PLL2_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f70:	e00c      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3324      	adds	r3, #36	; 0x24
 8002f76:	2101      	movs	r1, #1
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fddb 	bl	8003b34 <RCCEx_PLL3_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f82:	e003      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	75fb      	strb	r3, [r7, #23]
      break;
 8002f88:	e000      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8002f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f92:	4bb2      	ldr	r3, [pc, #712]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	f023 0207 	bic.w	r2, r3, #7
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa0:	49ae      	ldr	r1, [pc, #696]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	658b      	str	r3, [r1, #88]	; 0x58
 8002fa6:	e001      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d044      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc2:	d01b      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc8:	d805      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d022      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002fce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fd2:	d00a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002fd4:	e01b      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fda:	d01d      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe0:	d01c      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002fe2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fe6:	d01b      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002fe8:	e011      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3304      	adds	r3, #4
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fced 	bl	80039d0 <RCCEx_PLL2_Config>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002ffa:	e012      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3324      	adds	r3, #36	; 0x24
 8003000:	2102      	movs	r1, #2
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fd96 	bl	8003b34 <RCCEx_PLL3_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800300c:	e009      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	75fb      	strb	r3, [r7, #23]
      break;
 8003012:	e006      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003014:	bf00      	nop
 8003016:	e004      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003018:	bf00      	nop
 800301a:	e002      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800301c:	bf00      	nop
 800301e:	e000      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003028:	4b8c      	ldr	r3, [pc, #560]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800302a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003036:	4989      	ldr	r1, [pc, #548]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003038:	4313      	orrs	r3, r2
 800303a:	654b      	str	r3, [r1, #84]	; 0x54
 800303c:	e001      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d044      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003058:	d01b      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800305a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800305e:	d805      	bhi.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d022      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003068:	d00a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800306a:	e01b      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800306c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003070:	d01d      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003072:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003076:	d01c      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003078:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800307c:	d01b      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800307e:	e011      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3304      	adds	r3, #4
 8003084:	2100      	movs	r1, #0
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fca2 	bl	80039d0 <RCCEx_PLL2_Config>
 800308c:	4603      	mov	r3, r0
 800308e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003090:	e012      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3324      	adds	r3, #36	; 0x24
 8003096:	2102      	movs	r1, #2
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fd4b 	bl	8003b34 <RCCEx_PLL3_Config>
 800309e:	4603      	mov	r3, r0
 80030a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80030a2:	e009      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	75fb      	strb	r3, [r7, #23]
      break;
 80030a8:	e006      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80030aa:	bf00      	nop
 80030ac:	e004      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80030ae:	bf00      	nop
 80030b0:	e002      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80030b2:	bf00      	nop
 80030b4:	e000      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80030b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030be:	4b67      	ldr	r3, [pc, #412]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030cc:	4963      	ldr	r1, [pc, #396]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	658b      	str	r3, [r1, #88]	; 0x58
 80030d2:	e001      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d044      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ee:	d01b      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80030f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030f4:	d805      	bhi.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d022      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80030fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003100:	e01b      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8003102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003106:	d01d      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003108:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800310c:	d01c      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800310e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003112:	d01b      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003114:	e011      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3304      	adds	r3, #4
 800311a:	2100      	movs	r1, #0
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fc57 	bl	80039d0 <RCCEx_PLL2_Config>
 8003122:	4603      	mov	r3, r0
 8003124:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003126:	e012      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3324      	adds	r3, #36	; 0x24
 800312c:	2102      	movs	r1, #2
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fd00 	bl	8003b34 <RCCEx_PLL3_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003138:	e009      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	75fb      	strb	r3, [r7, #23]
      break;
 800313e:	e006      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003140:	bf00      	nop
 8003142:	e004      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003144:	bf00      	nop
 8003146:	e002      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003148:	bf00      	nop
 800314a:	e000      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800314c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800314e:	7dfb      	ldrb	r3, [r7, #23]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10a      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003154:	4b41      	ldr	r3, [pc, #260]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003162:	493e      	ldr	r1, [pc, #248]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003164:	4313      	orrs	r3, r2
 8003166:	658b      	str	r3, [r1, #88]	; 0x58
 8003168:	e001      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316a:	7dfb      	ldrb	r3, [r7, #23]
 800316c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d01a      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003184:	d10a      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3324      	adds	r3, #36	; 0x24
 800318a:	2102      	movs	r1, #2
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fcd1 	bl	8003b34 <RCCEx_PLL3_Config>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800319c:	4b2f      	ldr	r3, [pc, #188]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031aa:	492c      	ldr	r1, [pc, #176]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0310 	and.w	r3, r3, #16
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d01a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c6:	d10a      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3324      	adds	r3, #36	; 0x24
 80031cc:	2102      	movs	r1, #2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fcb0 	bl	8003b34 <RCCEx_PLL3_Config>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031de:	4b1f      	ldr	r3, [pc, #124]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80031e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ec:	491b      	ldr	r1, [pc, #108]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d032      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003208:	d00d      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800320a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800320e:	d016      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8003210:	2b00      	cmp	r3, #0
 8003212:	d111      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	2100      	movs	r1, #0
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fbd8 	bl	80039d0 <RCCEx_PLL2_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003224:	e00c      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3324      	adds	r3, #36	; 0x24
 800322a:	2102      	movs	r1, #2
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fc81 	bl	8003b34 <RCCEx_PLL3_Config>
 8003232:	4603      	mov	r3, r0
 8003234:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003236:	e003      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	75fb      	strb	r3, [r7, #23]
      break;
 800323c:	e000      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800323e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003240:	7dfb      	ldrb	r3, [r7, #23]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10c      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003246:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003254:	4901      	ldr	r1, [pc, #4]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003256:	4313      	orrs	r3, r2
 8003258:	658b      	str	r3, [r1, #88]	; 0x58
 800325a:	e003      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800325c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d02f      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003276:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800327a:	d00c      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800327c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003280:	d015      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8003282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003286:	d10f      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003288:	4b79      	ldr	r3, [pc, #484]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	4a78      	ldr	r2, [pc, #480]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800328e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003292:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003294:	e00c      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3324      	adds	r3, #36	; 0x24
 800329a:	2101      	movs	r1, #1
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fc49 	bl	8003b34 <RCCEx_PLL3_Config>
 80032a2:	4603      	mov	r3, r0
 80032a4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80032a6:	e003      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	75fb      	strb	r3, [r7, #23]
      break;
 80032ac:	e000      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80032ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032b6:	4b6e      	ldr	r3, [pc, #440]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80032b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c4:	496a      	ldr	r1, [pc, #424]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	654b      	str	r3, [r1, #84]	; 0x54
 80032ca:	e001      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d029      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d007      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80032ea:	e00f      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ec:	4b60      	ldr	r3, [pc, #384]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	4a5f      	ldr	r2, [pc, #380]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80032f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80032f8:	e00b      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	2102      	movs	r1, #2
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fb65 	bl	80039d0 <RCCEx_PLL2_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800330a:	e002      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	75fb      	strb	r3, [r7, #23]
      break;
 8003310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003312:	7dfb      	ldrb	r3, [r7, #23]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d109      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003318:	4b55      	ldr	r3, [pc, #340]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800331a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003324:	4952      	ldr	r1, [pc, #328]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003326:	4313      	orrs	r3, r2
 8003328:	64cb      	str	r3, [r1, #76]	; 0x4c
 800332a:	e001      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800332c:	7dfb      	ldrb	r3, [r7, #23]
 800332e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3324      	adds	r3, #36	; 0x24
 8003340:	2102      	movs	r1, #2
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fbf6 	bl	8003b34 <RCCEx_PLL3_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d02f      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003366:	d00c      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336c:	d802      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d011      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8003372:	e00d      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8003374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003378:	d00f      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800337a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800337e:	d00e      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8003380:	e006      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003382:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	4a3a      	ldr	r2, [pc, #232]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800338c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800338e:	e007      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	75fb      	strb	r3, [r7, #23]
      break;
 8003394:	e004      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003396:	bf00      	nop
 8003398:	e002      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800339a:	bf00      	nop
 800339c:	e000      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800339e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a0:	7dfb      	ldrb	r3, [r7, #23]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033a6:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b2:	492f      	ldr	r1, [pc, #188]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	654b      	str	r3, [r1, #84]	; 0x54
 80033b8:	e001      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ba:	7dfb      	ldrb	r3, [r7, #23]
 80033bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033ca:	4b29      	ldr	r3, [pc, #164]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	4926      	ldr	r1, [pc, #152]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d009      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80033e8:	4b21      	ldr	r3, [pc, #132]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033f6:	491e      	ldr	r1, [pc, #120]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003408:	4b19      	ldr	r3, [pc, #100]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800340a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003414:	4916      	ldr	r1, [pc, #88]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003416:	4313      	orrs	r3, r2
 8003418:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00d      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003426:	4b12      	ldr	r3, [pc, #72]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	4a11      	ldr	r2, [pc, #68]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800342c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003430:	6113      	str	r3, [r2, #16]
 8003432:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003434:	691a      	ldr	r2, [r3, #16]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800343c:	490c      	ldr	r1, [pc, #48]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800343e:	4313      	orrs	r3, r2
 8003440:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	da08      	bge.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800344a:	4b09      	ldr	r3, [pc, #36]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003456:	4906      	ldr	r1, [pc, #24]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8003458:	4313      	orrs	r3, r2
 800345a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800345c:	7dbb      	ldrb	r3, [r7, #22]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	e000      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	58024400 	.word	0x58024400

08003474 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003478:	f7ff f8b2 	bl	80025e0 <HAL_RCC_GetHCLKFreq>
 800347c:	4601      	mov	r1, r0
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	091b      	lsrs	r3, r3, #4
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	4a04      	ldr	r2, [pc, #16]	; (800349c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800348a:	5cd3      	ldrb	r3, [r2, r3]
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003494:	4618      	mov	r0, r3
 8003496:	bd80      	pop	{r7, pc}
 8003498:	58024400 	.word	0x58024400
 800349c:	08005d38 	.word	0x08005d38

080034a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b089      	sub	sp, #36	; 0x24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034a8:	4b9d      	ldr	r3, [pc, #628]	; (8003720 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80034b2:	4b9b      	ldr	r3, [pc, #620]	; (8003720 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	0b1b      	lsrs	r3, r3, #12
 80034b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80034be:	4b98      	ldr	r3, [pc, #608]	; (8003720 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c2:	091b      	lsrs	r3, r3, #4
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80034ca:	4b95      	ldr	r3, [pc, #596]	; (8003720 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ce:	08db      	lsrs	r3, r3, #3
 80034d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 810a 	beq.w	8003702 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d05a      	beq.n	80035aa <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d302      	bcc.n	80034fe <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d078      	beq.n	80035ee <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80034fc:	e099      	b.n	8003632 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034fe:	4b88      	ldr	r3, [pc, #544]	; (8003720 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02d      	beq.n	8003566 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800350a:	4b85      	ldr	r3, [pc, #532]	; (8003720 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	08db      	lsrs	r3, r3, #3
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	4a83      	ldr	r2, [pc, #524]	; (8003724 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8003516:	fa22 f303 	lsr.w	r3, r2, r3
 800351a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003534:	4b7a      	ldr	r3, [pc, #488]	; (8003720 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800353c:	ee07 3a90 	vmov	s15, r3
 8003540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003544:	ed97 6a03 	vldr	s12, [r7, #12]
 8003548:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800354c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003550:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800355c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003560:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003564:	e087      	b.n	8003676 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	ee07 3a90 	vmov	s15, r3
 800356c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003570:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800372c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8003574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003578:	4b69      	ldr	r3, [pc, #420]	; (8003720 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003580:	ee07 3a90 	vmov	s15, r3
 8003584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003588:	ed97 6a03 	vldr	s12, [r7, #12]
 800358c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800359c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035a8:	e065      	b.n	8003676 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	ee07 3a90 	vmov	s15, r3
 80035b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80035b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035bc:	4b58      	ldr	r3, [pc, #352]	; (8003720 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c4:	ee07 3a90 	vmov	s15, r3
 80035c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80035d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80035d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035ec:	e043      	b.n	8003676 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	ee07 3a90 	vmov	s15, r3
 80035f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80035fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003600:	4b47      	ldr	r3, [pc, #284]	; (8003720 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003608:	ee07 3a90 	vmov	s15, r3
 800360c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003610:	ed97 6a03 	vldr	s12, [r7, #12]
 8003614:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800361c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003620:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003630:	e021      	b.n	8003676 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	ee07 3a90 	vmov	s15, r3
 8003638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003644:	4b36      	ldr	r3, [pc, #216]	; (8003720 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364c:	ee07 3a90 	vmov	s15, r3
 8003650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003654:	ed97 6a03 	vldr	s12, [r7, #12]
 8003658:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003728 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800365c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003664:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800366c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003670:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003674:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003676:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	0a5b      	lsrs	r3, r3, #9
 800367c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003680:	ee07 3a90 	vmov	s15, r3
 8003684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003688:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800368c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003690:	edd7 6a07 	vldr	s13, [r7, #28]
 8003694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800369c:	ee17 2a90 	vmov	r2, s15
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80036a4:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036be:	edd7 6a07 	vldr	s13, [r7, #28]
 80036c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036ca:	ee17 2a90 	vmov	r2, s15
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80036d2:	4b13      	ldr	r3, [pc, #76]	; (8003720 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d6:	0e1b      	lsrs	r3, r3, #24
 80036d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036dc:	ee07 3a90 	vmov	s15, r3
 80036e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80036f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036f8:	ee17 2a90 	vmov	r2, s15
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003700:	e008      	b.n	8003714 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
}
 8003714:	bf00      	nop
 8003716:	3724      	adds	r7, #36	; 0x24
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	58024400 	.word	0x58024400
 8003724:	03d09000 	.word	0x03d09000
 8003728:	46000000 	.word	0x46000000
 800372c:	4c742400 	.word	0x4c742400
 8003730:	4a742400 	.word	0x4a742400
 8003734:	4bbebc20 	.word	0x4bbebc20

08003738 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	; 0x24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003740:	4b9d      	ldr	r3, [pc, #628]	; (80039b8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800374a:	4b9b      	ldr	r3, [pc, #620]	; (80039b8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	0d1b      	lsrs	r3, r3, #20
 8003750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003754:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003756:	4b98      	ldr	r3, [pc, #608]	; (80039b8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	0a1b      	lsrs	r3, r3, #8
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003762:	4b95      	ldr	r3, [pc, #596]	; (80039b8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	08db      	lsrs	r3, r3, #3
 8003768:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 810a 	beq.w	800399a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d05a      	beq.n	8003842 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800378c:	2b01      	cmp	r3, #1
 800378e:	d302      	bcc.n	8003796 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8003790:	2b02      	cmp	r3, #2
 8003792:	d078      	beq.n	8003886 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8003794:	e099      	b.n	80038ca <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003796:	4b88      	ldr	r3, [pc, #544]	; (80039b8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d02d      	beq.n	80037fe <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037a2:	4b85      	ldr	r3, [pc, #532]	; (80039b8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	08db      	lsrs	r3, r3, #3
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	4a83      	ldr	r2, [pc, #524]	; (80039bc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80037ae:	fa22 f303 	lsr.w	r3, r2, r3
 80037b2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	ee07 3a90 	vmov	s15, r3
 80037c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037cc:	4b7a      	ldr	r3, [pc, #488]	; (80039b8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d4:	ee07 3a90 	vmov	s15, r3
 80037d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80037e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80037e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80037fc:	e087      	b.n	800390e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	ee07 3a90 	vmov	s15, r3
 8003804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003808:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80039c4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800380c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003810:	4b69      	ldr	r3, [pc, #420]	; (80039b8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003818:	ee07 3a90 	vmov	s15, r3
 800381c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003820:	ed97 6a03 	vldr	s12, [r7, #12]
 8003824:	eddf 5a66 	vldr	s11, [pc, #408]	; 80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003828:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800382c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003834:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003840:	e065      	b.n	800390e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	ee07 3a90 	vmov	s15, r3
 8003848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003854:	4b58      	ldr	r3, [pc, #352]	; (80039b8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385c:	ee07 3a90 	vmov	s15, r3
 8003860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003864:	ed97 6a03 	vldr	s12, [r7, #12]
 8003868:	eddf 5a55 	vldr	s11, [pc, #340]	; 80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800386c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003878:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800387c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003880:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003884:	e043      	b.n	800390e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	ee07 3a90 	vmov	s15, r3
 800388c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003890:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80039cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8003894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003898:	4b47      	ldr	r3, [pc, #284]	; (80039b8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a0:	ee07 3a90 	vmov	s15, r3
 80038a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80038ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80038b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038c8:	e021      	b.n	800390e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	ee07 3a90 	vmov	s15, r3
 80038d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80038d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038dc:	4b36      	ldr	r3, [pc, #216]	; (80039b8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e4:	ee07 3a90 	vmov	s15, r3
 80038e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80038f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80039c0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80038f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003900:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003908:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800390c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800390e:	4b2a      	ldr	r3, [pc, #168]	; (80039b8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	0a5b      	lsrs	r3, r3, #9
 8003914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003918:	ee07 3a90 	vmov	s15, r3
 800391c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003920:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003924:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003928:	edd7 6a07 	vldr	s13, [r7, #28]
 800392c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003934:	ee17 2a90 	vmov	r2, s15
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800393c:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003946:	ee07 3a90 	vmov	s15, r3
 800394a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003952:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003956:	edd7 6a07 	vldr	s13, [r7, #28]
 800395a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800395e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003962:	ee17 2a90 	vmov	r2, s15
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	0e1b      	lsrs	r3, r3, #24
 8003970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003974:	ee07 3a90 	vmov	s15, r3
 8003978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003980:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003984:	edd7 6a07 	vldr	s13, [r7, #28]
 8003988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800398c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003990:	ee17 2a90 	vmov	r2, s15
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003998:	e008      	b.n	80039ac <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	609a      	str	r2, [r3, #8]
}
 80039ac:	bf00      	nop
 80039ae:	3724      	adds	r7, #36	; 0x24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	58024400 	.word	0x58024400
 80039bc:	03d09000 	.word	0x03d09000
 80039c0:	46000000 	.word	0x46000000
 80039c4:	4c742400 	.word	0x4c742400
 80039c8:	4a742400 	.word	0x4a742400
 80039cc:	4bbebc20 	.word	0x4bbebc20

080039d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80039de:	4b53      	ldr	r3, [pc, #332]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d101      	bne.n	80039ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e099      	b.n	8003b22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80039ee:	4b4f      	ldr	r3, [pc, #316]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a4e      	ldr	r2, [pc, #312]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 80039f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039fa:	f7fd faf7 	bl	8000fec <HAL_GetTick>
 80039fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a00:	e008      	b.n	8003a14 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a02:	f7fd faf3 	bl	8000fec <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e086      	b.n	8003b22 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a14:	4b45      	ldr	r3, [pc, #276]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1f0      	bne.n	8003a02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003a20:	4b42      	ldr	r3, [pc, #264]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	031b      	lsls	r3, r3, #12
 8003a2e:	493f      	ldr	r1, [pc, #252]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	628b      	str	r3, [r1, #40]	; 0x28
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	025b      	lsls	r3, r3, #9
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	041b      	lsls	r3, r3, #16
 8003a52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	061b      	lsls	r3, r3, #24
 8003a60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a64:	4931      	ldr	r1, [pc, #196]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003a6a:	4b30      	ldr	r3, [pc, #192]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	492d      	ldr	r1, [pc, #180]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003a7c:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	f023 0220 	bic.w	r2, r3, #32
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	4928      	ldr	r1, [pc, #160]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003a8e:	4b27      	ldr	r3, [pc, #156]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	4a26      	ldr	r2, [pc, #152]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003a94:	f023 0310 	bic.w	r3, r3, #16
 8003a98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003a9a:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003a9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a9e:	4b24      	ldr	r3, [pc, #144]	; (8003b30 <RCCEx_PLL2_Config+0x160>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	69d2      	ldr	r2, [r2, #28]
 8003aa6:	00d2      	lsls	r2, r2, #3
 8003aa8:	4920      	ldr	r1, [pc, #128]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003aae:	4b1f      	ldr	r3, [pc, #124]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	4a1e      	ldr	r2, [pc, #120]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003ab4:	f043 0310 	orr.w	r3, r3, #16
 8003ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d106      	bne.n	8003ace <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ac0:	4b1a      	ldr	r3, [pc, #104]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	4a19      	ldr	r2, [pc, #100]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003ac6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003aca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003acc:	e00f      	b.n	8003aee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d106      	bne.n	8003ae2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ad4:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	4a14      	ldr	r2, [pc, #80]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ade:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ae0:	e005      	b.n	8003aee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ae2:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	4a11      	ldr	r2, [pc, #68]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003ae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003aec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003aee:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a0e      	ldr	r2, [pc, #56]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003af4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003af8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003afa:	f7fd fa77 	bl	8000fec <HAL_GetTick>
 8003afe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b00:	e008      	b.n	8003b14 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003b02:	f7fd fa73 	bl	8000fec <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e006      	b.n	8003b22 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <RCCEx_PLL2_Config+0x15c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0f0      	beq.n	8003b02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	58024400 	.word	0x58024400
 8003b30:	ffff0007 	.word	0xffff0007

08003b34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b42:	4b53      	ldr	r3, [pc, #332]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d101      	bne.n	8003b52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e099      	b.n	8003c86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003b52:	4b4f      	ldr	r3, [pc, #316]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a4e      	ldr	r2, [pc, #312]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b5e:	f7fd fa45 	bl	8000fec <HAL_GetTick>
 8003b62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b64:	e008      	b.n	8003b78 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003b66:	f7fd fa41 	bl	8000fec <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e086      	b.n	8003c86 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b78:	4b45      	ldr	r3, [pc, #276]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f0      	bne.n	8003b66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003b84:	4b42      	ldr	r3, [pc, #264]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	051b      	lsls	r3, r3, #20
 8003b92:	493f      	ldr	r1, [pc, #252]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	628b      	str	r3, [r1, #40]	; 0x28
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	025b      	lsls	r3, r3, #9
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	041b      	lsls	r3, r3, #16
 8003bb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	061b      	lsls	r3, r3, #24
 8003bc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003bc8:	4931      	ldr	r1, [pc, #196]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003bce:	4b30      	ldr	r3, [pc, #192]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	492d      	ldr	r1, [pc, #180]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003be0:	4b2b      	ldr	r3, [pc, #172]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	4928      	ldr	r1, [pc, #160]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003bf2:	4b27      	ldr	r3, [pc, #156]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	4a26      	ldr	r2, [pc, #152]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003bfe:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003c00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c02:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <RCCEx_PLL3_Config+0x160>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	69d2      	ldr	r2, [r2, #28]
 8003c0a:	00d2      	lsls	r2, r2, #3
 8003c0c:	4920      	ldr	r1, [pc, #128]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003c12:	4b1f      	ldr	r3, [pc, #124]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	4a1e      	ldr	r2, [pc, #120]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d106      	bne.n	8003c32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003c24:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	4a19      	ldr	r2, [pc, #100]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003c2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c30:	e00f      	b.n	8003c52 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d106      	bne.n	8003c46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003c38:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	4a14      	ldr	r2, [pc, #80]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003c3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c44:	e005      	b.n	8003c52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003c46:	4b12      	ldr	r3, [pc, #72]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	4a11      	ldr	r2, [pc, #68]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003c4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a0e      	ldr	r2, [pc, #56]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c5e:	f7fd f9c5 	bl	8000fec <HAL_GetTick>
 8003c62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c64:	e008      	b.n	8003c78 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003c66:	f7fd f9c1 	bl	8000fec <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e006      	b.n	8003c86 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <RCCEx_PLL3_Config+0x15c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	58024400 	.word	0x58024400
 8003c94:	ffff0007 	.word	0xffff0007

08003c98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e042      	b.n	8003d30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d106      	bne.n	8003cc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7fd f865 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2224      	movs	r2, #36	; 0x24
 8003cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0201 	bic.w	r2, r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f8c2 	bl	8003e64 <UART_SetConfig>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e022      	b.n	8003d30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fe66 	bl	80049c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 feed 	bl	8004b08 <UART_CheckIdleState>
 8003d2e:	4603      	mov	r3, r0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	; 0x28
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	4613      	mov	r3, r2
 8003d46:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4e:	2b20      	cmp	r3, #32
 8003d50:	f040 8083 	bne.w	8003e5a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_UART_Transmit+0x28>
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e07b      	b.n	8003e5c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_UART_Transmit+0x3a>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e074      	b.n	8003e5c <HAL_UART_Transmit+0x124>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2221      	movs	r2, #33	; 0x21
 8003d86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003d8a:	f7fd f92f 	bl	8000fec <HAL_GetTick>
 8003d8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	88fa      	ldrh	r2, [r7, #6]
 8003d9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da8:	d108      	bne.n	8003dbc <HAL_UART_Transmit+0x84>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d104      	bne.n	8003dbc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	e003      	b.n	8003dc4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8003dcc:	e02c      	b.n	8003e28 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2180      	movs	r1, #128	; 0x80
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 fedd 	bl	8004b98 <UART_WaitOnFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e039      	b.n	8003e5c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10b      	bne.n	8003e06 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dfc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	3302      	adds	r3, #2
 8003e02:	61bb      	str	r3, [r7, #24]
 8003e04:	e007      	b.n	8003e16 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	781a      	ldrb	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	3301      	adds	r3, #1
 8003e14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1cc      	bne.n	8003dce <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2140      	movs	r1, #64	; 0x40
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 feaa 	bl	8004b98 <UART_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e006      	b.n	8003e5c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e000      	b.n	8003e5c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003e5a:	2302      	movs	r3, #2
  }
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3720      	adds	r7, #32
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e64:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003e68:	b08e      	sub	sp, #56	; 0x38
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e92:	4313      	orrs	r3, r2
 8003e94:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4bc1      	ldr	r3, [pc, #772]	; (80041a4 <UART_SetConfig+0x340>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003ea6:	430b      	orrs	r3, r1
 8003ea8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4ab7      	ldr	r2, [pc, #732]	; (80041a8 <UART_SetConfig+0x344>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d004      	beq.n	8003eda <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	4bb2      	ldr	r3, [pc, #712]	; (80041ac <UART_SetConfig+0x348>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6812      	ldr	r2, [r2, #0]
 8003ee8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003eea:	430b      	orrs	r3, r1
 8003eec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	f023 010f 	bic.w	r1, r3, #15
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4aa9      	ldr	r2, [pc, #676]	; (80041b0 <UART_SetConfig+0x34c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d177      	bne.n	8003ffe <UART_SetConfig+0x19a>
 8003f0e:	4ba9      	ldr	r3, [pc, #676]	; (80041b4 <UART_SetConfig+0x350>)
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f16:	2b28      	cmp	r3, #40	; 0x28
 8003f18:	d86c      	bhi.n	8003ff4 <UART_SetConfig+0x190>
 8003f1a:	a201      	add	r2, pc, #4	; (adr r2, 8003f20 <UART_SetConfig+0xbc>)
 8003f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f20:	08003fc5 	.word	0x08003fc5
 8003f24:	08003ff5 	.word	0x08003ff5
 8003f28:	08003ff5 	.word	0x08003ff5
 8003f2c:	08003ff5 	.word	0x08003ff5
 8003f30:	08003ff5 	.word	0x08003ff5
 8003f34:	08003ff5 	.word	0x08003ff5
 8003f38:	08003ff5 	.word	0x08003ff5
 8003f3c:	08003ff5 	.word	0x08003ff5
 8003f40:	08003fcd 	.word	0x08003fcd
 8003f44:	08003ff5 	.word	0x08003ff5
 8003f48:	08003ff5 	.word	0x08003ff5
 8003f4c:	08003ff5 	.word	0x08003ff5
 8003f50:	08003ff5 	.word	0x08003ff5
 8003f54:	08003ff5 	.word	0x08003ff5
 8003f58:	08003ff5 	.word	0x08003ff5
 8003f5c:	08003ff5 	.word	0x08003ff5
 8003f60:	08003fd5 	.word	0x08003fd5
 8003f64:	08003ff5 	.word	0x08003ff5
 8003f68:	08003ff5 	.word	0x08003ff5
 8003f6c:	08003ff5 	.word	0x08003ff5
 8003f70:	08003ff5 	.word	0x08003ff5
 8003f74:	08003ff5 	.word	0x08003ff5
 8003f78:	08003ff5 	.word	0x08003ff5
 8003f7c:	08003ff5 	.word	0x08003ff5
 8003f80:	08003fdd 	.word	0x08003fdd
 8003f84:	08003ff5 	.word	0x08003ff5
 8003f88:	08003ff5 	.word	0x08003ff5
 8003f8c:	08003ff5 	.word	0x08003ff5
 8003f90:	08003ff5 	.word	0x08003ff5
 8003f94:	08003ff5 	.word	0x08003ff5
 8003f98:	08003ff5 	.word	0x08003ff5
 8003f9c:	08003ff5 	.word	0x08003ff5
 8003fa0:	08003fe5 	.word	0x08003fe5
 8003fa4:	08003ff5 	.word	0x08003ff5
 8003fa8:	08003ff5 	.word	0x08003ff5
 8003fac:	08003ff5 	.word	0x08003ff5
 8003fb0:	08003ff5 	.word	0x08003ff5
 8003fb4:	08003ff5 	.word	0x08003ff5
 8003fb8:	08003ff5 	.word	0x08003ff5
 8003fbc:	08003ff5 	.word	0x08003ff5
 8003fc0:	08003fed 	.word	0x08003fed
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fca:	e233      	b.n	8004434 <UART_SetConfig+0x5d0>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fd2:	e22f      	b.n	8004434 <UART_SetConfig+0x5d0>
 8003fd4:	2308      	movs	r3, #8
 8003fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fda:	e22b      	b.n	8004434 <UART_SetConfig+0x5d0>
 8003fdc:	2310      	movs	r3, #16
 8003fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fe2:	e227      	b.n	8004434 <UART_SetConfig+0x5d0>
 8003fe4:	2320      	movs	r3, #32
 8003fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fea:	e223      	b.n	8004434 <UART_SetConfig+0x5d0>
 8003fec:	2340      	movs	r3, #64	; 0x40
 8003fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ff2:	e21f      	b.n	8004434 <UART_SetConfig+0x5d0>
 8003ff4:	2380      	movs	r3, #128	; 0x80
 8003ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ffa:	bf00      	nop
 8003ffc:	e21a      	b.n	8004434 <UART_SetConfig+0x5d0>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a6d      	ldr	r2, [pc, #436]	; (80041b8 <UART_SetConfig+0x354>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d132      	bne.n	800406e <UART_SetConfig+0x20a>
 8004008:	4b6a      	ldr	r3, [pc, #424]	; (80041b4 <UART_SetConfig+0x350>)
 800400a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	2b05      	cmp	r3, #5
 8004012:	d827      	bhi.n	8004064 <UART_SetConfig+0x200>
 8004014:	a201      	add	r2, pc, #4	; (adr r2, 800401c <UART_SetConfig+0x1b8>)
 8004016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401a:	bf00      	nop
 800401c:	08004035 	.word	0x08004035
 8004020:	0800403d 	.word	0x0800403d
 8004024:	08004045 	.word	0x08004045
 8004028:	0800404d 	.word	0x0800404d
 800402c:	08004055 	.word	0x08004055
 8004030:	0800405d 	.word	0x0800405d
 8004034:	2300      	movs	r3, #0
 8004036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800403a:	e1fb      	b.n	8004434 <UART_SetConfig+0x5d0>
 800403c:	2304      	movs	r3, #4
 800403e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004042:	e1f7      	b.n	8004434 <UART_SetConfig+0x5d0>
 8004044:	2308      	movs	r3, #8
 8004046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800404a:	e1f3      	b.n	8004434 <UART_SetConfig+0x5d0>
 800404c:	2310      	movs	r3, #16
 800404e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004052:	e1ef      	b.n	8004434 <UART_SetConfig+0x5d0>
 8004054:	2320      	movs	r3, #32
 8004056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800405a:	e1eb      	b.n	8004434 <UART_SetConfig+0x5d0>
 800405c:	2340      	movs	r3, #64	; 0x40
 800405e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004062:	e1e7      	b.n	8004434 <UART_SetConfig+0x5d0>
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800406a:	bf00      	nop
 800406c:	e1e2      	b.n	8004434 <UART_SetConfig+0x5d0>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a52      	ldr	r2, [pc, #328]	; (80041bc <UART_SetConfig+0x358>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d132      	bne.n	80040de <UART_SetConfig+0x27a>
 8004078:	4b4e      	ldr	r3, [pc, #312]	; (80041b4 <UART_SetConfig+0x350>)
 800407a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	2b05      	cmp	r3, #5
 8004082:	d827      	bhi.n	80040d4 <UART_SetConfig+0x270>
 8004084:	a201      	add	r2, pc, #4	; (adr r2, 800408c <UART_SetConfig+0x228>)
 8004086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408a:	bf00      	nop
 800408c:	080040a5 	.word	0x080040a5
 8004090:	080040ad 	.word	0x080040ad
 8004094:	080040b5 	.word	0x080040b5
 8004098:	080040bd 	.word	0x080040bd
 800409c:	080040c5 	.word	0x080040c5
 80040a0:	080040cd 	.word	0x080040cd
 80040a4:	2300      	movs	r3, #0
 80040a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040aa:	e1c3      	b.n	8004434 <UART_SetConfig+0x5d0>
 80040ac:	2304      	movs	r3, #4
 80040ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040b2:	e1bf      	b.n	8004434 <UART_SetConfig+0x5d0>
 80040b4:	2308      	movs	r3, #8
 80040b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ba:	e1bb      	b.n	8004434 <UART_SetConfig+0x5d0>
 80040bc:	2310      	movs	r3, #16
 80040be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040c2:	e1b7      	b.n	8004434 <UART_SetConfig+0x5d0>
 80040c4:	2320      	movs	r3, #32
 80040c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ca:	e1b3      	b.n	8004434 <UART_SetConfig+0x5d0>
 80040cc:	2340      	movs	r3, #64	; 0x40
 80040ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040d2:	e1af      	b.n	8004434 <UART_SetConfig+0x5d0>
 80040d4:	2380      	movs	r3, #128	; 0x80
 80040d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040da:	bf00      	nop
 80040dc:	e1aa      	b.n	8004434 <UART_SetConfig+0x5d0>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a37      	ldr	r2, [pc, #220]	; (80041c0 <UART_SetConfig+0x35c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d132      	bne.n	800414e <UART_SetConfig+0x2ea>
 80040e8:	4b32      	ldr	r3, [pc, #200]	; (80041b4 <UART_SetConfig+0x350>)
 80040ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	2b05      	cmp	r3, #5
 80040f2:	d827      	bhi.n	8004144 <UART_SetConfig+0x2e0>
 80040f4:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <UART_SetConfig+0x298>)
 80040f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fa:	bf00      	nop
 80040fc:	08004115 	.word	0x08004115
 8004100:	0800411d 	.word	0x0800411d
 8004104:	08004125 	.word	0x08004125
 8004108:	0800412d 	.word	0x0800412d
 800410c:	08004135 	.word	0x08004135
 8004110:	0800413d 	.word	0x0800413d
 8004114:	2300      	movs	r3, #0
 8004116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800411a:	e18b      	b.n	8004434 <UART_SetConfig+0x5d0>
 800411c:	2304      	movs	r3, #4
 800411e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004122:	e187      	b.n	8004434 <UART_SetConfig+0x5d0>
 8004124:	2308      	movs	r3, #8
 8004126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800412a:	e183      	b.n	8004434 <UART_SetConfig+0x5d0>
 800412c:	2310      	movs	r3, #16
 800412e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004132:	e17f      	b.n	8004434 <UART_SetConfig+0x5d0>
 8004134:	2320      	movs	r3, #32
 8004136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800413a:	e17b      	b.n	8004434 <UART_SetConfig+0x5d0>
 800413c:	2340      	movs	r3, #64	; 0x40
 800413e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004142:	e177      	b.n	8004434 <UART_SetConfig+0x5d0>
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800414a:	bf00      	nop
 800414c:	e172      	b.n	8004434 <UART_SetConfig+0x5d0>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1c      	ldr	r2, [pc, #112]	; (80041c4 <UART_SetConfig+0x360>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d144      	bne.n	80041e2 <UART_SetConfig+0x37e>
 8004158:	4b16      	ldr	r3, [pc, #88]	; (80041b4 <UART_SetConfig+0x350>)
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	2b05      	cmp	r3, #5
 8004162:	d839      	bhi.n	80041d8 <UART_SetConfig+0x374>
 8004164:	a201      	add	r2, pc, #4	; (adr r2, 800416c <UART_SetConfig+0x308>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	08004185 	.word	0x08004185
 8004170:	0800418d 	.word	0x0800418d
 8004174:	08004195 	.word	0x08004195
 8004178:	0800419d 	.word	0x0800419d
 800417c:	080041c9 	.word	0x080041c9
 8004180:	080041d1 	.word	0x080041d1
 8004184:	2300      	movs	r3, #0
 8004186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800418a:	e153      	b.n	8004434 <UART_SetConfig+0x5d0>
 800418c:	2304      	movs	r3, #4
 800418e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004192:	e14f      	b.n	8004434 <UART_SetConfig+0x5d0>
 8004194:	2308      	movs	r3, #8
 8004196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800419a:	e14b      	b.n	8004434 <UART_SetConfig+0x5d0>
 800419c:	2310      	movs	r3, #16
 800419e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041a2:	e147      	b.n	8004434 <UART_SetConfig+0x5d0>
 80041a4:	cfff69f3 	.word	0xcfff69f3
 80041a8:	58000c00 	.word	0x58000c00
 80041ac:	11fff4ff 	.word	0x11fff4ff
 80041b0:	40011000 	.word	0x40011000
 80041b4:	58024400 	.word	0x58024400
 80041b8:	40004400 	.word	0x40004400
 80041bc:	40004800 	.word	0x40004800
 80041c0:	40004c00 	.word	0x40004c00
 80041c4:	40005000 	.word	0x40005000
 80041c8:	2320      	movs	r3, #32
 80041ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ce:	e131      	b.n	8004434 <UART_SetConfig+0x5d0>
 80041d0:	2340      	movs	r3, #64	; 0x40
 80041d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041d6:	e12d      	b.n	8004434 <UART_SetConfig+0x5d0>
 80041d8:	2380      	movs	r3, #128	; 0x80
 80041da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041de:	bf00      	nop
 80041e0:	e128      	b.n	8004434 <UART_SetConfig+0x5d0>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4ab6      	ldr	r2, [pc, #728]	; (80044c0 <UART_SetConfig+0x65c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d178      	bne.n	80042de <UART_SetConfig+0x47a>
 80041ec:	4bb5      	ldr	r3, [pc, #724]	; (80044c4 <UART_SetConfig+0x660>)
 80041ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041f4:	2b28      	cmp	r3, #40	; 0x28
 80041f6:	d86d      	bhi.n	80042d4 <UART_SetConfig+0x470>
 80041f8:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <UART_SetConfig+0x39c>)
 80041fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fe:	bf00      	nop
 8004200:	080042a5 	.word	0x080042a5
 8004204:	080042d5 	.word	0x080042d5
 8004208:	080042d5 	.word	0x080042d5
 800420c:	080042d5 	.word	0x080042d5
 8004210:	080042d5 	.word	0x080042d5
 8004214:	080042d5 	.word	0x080042d5
 8004218:	080042d5 	.word	0x080042d5
 800421c:	080042d5 	.word	0x080042d5
 8004220:	080042ad 	.word	0x080042ad
 8004224:	080042d5 	.word	0x080042d5
 8004228:	080042d5 	.word	0x080042d5
 800422c:	080042d5 	.word	0x080042d5
 8004230:	080042d5 	.word	0x080042d5
 8004234:	080042d5 	.word	0x080042d5
 8004238:	080042d5 	.word	0x080042d5
 800423c:	080042d5 	.word	0x080042d5
 8004240:	080042b5 	.word	0x080042b5
 8004244:	080042d5 	.word	0x080042d5
 8004248:	080042d5 	.word	0x080042d5
 800424c:	080042d5 	.word	0x080042d5
 8004250:	080042d5 	.word	0x080042d5
 8004254:	080042d5 	.word	0x080042d5
 8004258:	080042d5 	.word	0x080042d5
 800425c:	080042d5 	.word	0x080042d5
 8004260:	080042bd 	.word	0x080042bd
 8004264:	080042d5 	.word	0x080042d5
 8004268:	080042d5 	.word	0x080042d5
 800426c:	080042d5 	.word	0x080042d5
 8004270:	080042d5 	.word	0x080042d5
 8004274:	080042d5 	.word	0x080042d5
 8004278:	080042d5 	.word	0x080042d5
 800427c:	080042d5 	.word	0x080042d5
 8004280:	080042c5 	.word	0x080042c5
 8004284:	080042d5 	.word	0x080042d5
 8004288:	080042d5 	.word	0x080042d5
 800428c:	080042d5 	.word	0x080042d5
 8004290:	080042d5 	.word	0x080042d5
 8004294:	080042d5 	.word	0x080042d5
 8004298:	080042d5 	.word	0x080042d5
 800429c:	080042d5 	.word	0x080042d5
 80042a0:	080042cd 	.word	0x080042cd
 80042a4:	2301      	movs	r3, #1
 80042a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042aa:	e0c3      	b.n	8004434 <UART_SetConfig+0x5d0>
 80042ac:	2304      	movs	r3, #4
 80042ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042b2:	e0bf      	b.n	8004434 <UART_SetConfig+0x5d0>
 80042b4:	2308      	movs	r3, #8
 80042b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ba:	e0bb      	b.n	8004434 <UART_SetConfig+0x5d0>
 80042bc:	2310      	movs	r3, #16
 80042be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042c2:	e0b7      	b.n	8004434 <UART_SetConfig+0x5d0>
 80042c4:	2320      	movs	r3, #32
 80042c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ca:	e0b3      	b.n	8004434 <UART_SetConfig+0x5d0>
 80042cc:	2340      	movs	r3, #64	; 0x40
 80042ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042d2:	e0af      	b.n	8004434 <UART_SetConfig+0x5d0>
 80042d4:	2380      	movs	r3, #128	; 0x80
 80042d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042da:	bf00      	nop
 80042dc:	e0aa      	b.n	8004434 <UART_SetConfig+0x5d0>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a79      	ldr	r2, [pc, #484]	; (80044c8 <UART_SetConfig+0x664>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d132      	bne.n	800434e <UART_SetConfig+0x4ea>
 80042e8:	4b76      	ldr	r3, [pc, #472]	; (80044c4 <UART_SetConfig+0x660>)
 80042ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	2b05      	cmp	r3, #5
 80042f2:	d827      	bhi.n	8004344 <UART_SetConfig+0x4e0>
 80042f4:	a201      	add	r2, pc, #4	; (adr r2, 80042fc <UART_SetConfig+0x498>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	08004315 	.word	0x08004315
 8004300:	0800431d 	.word	0x0800431d
 8004304:	08004325 	.word	0x08004325
 8004308:	0800432d 	.word	0x0800432d
 800430c:	08004335 	.word	0x08004335
 8004310:	0800433d 	.word	0x0800433d
 8004314:	2300      	movs	r3, #0
 8004316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800431a:	e08b      	b.n	8004434 <UART_SetConfig+0x5d0>
 800431c:	2304      	movs	r3, #4
 800431e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004322:	e087      	b.n	8004434 <UART_SetConfig+0x5d0>
 8004324:	2308      	movs	r3, #8
 8004326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800432a:	e083      	b.n	8004434 <UART_SetConfig+0x5d0>
 800432c:	2310      	movs	r3, #16
 800432e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004332:	e07f      	b.n	8004434 <UART_SetConfig+0x5d0>
 8004334:	2320      	movs	r3, #32
 8004336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800433a:	e07b      	b.n	8004434 <UART_SetConfig+0x5d0>
 800433c:	2340      	movs	r3, #64	; 0x40
 800433e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004342:	e077      	b.n	8004434 <UART_SetConfig+0x5d0>
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800434a:	bf00      	nop
 800434c:	e072      	b.n	8004434 <UART_SetConfig+0x5d0>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a5e      	ldr	r2, [pc, #376]	; (80044cc <UART_SetConfig+0x668>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d132      	bne.n	80043be <UART_SetConfig+0x55a>
 8004358:	4b5a      	ldr	r3, [pc, #360]	; (80044c4 <UART_SetConfig+0x660>)
 800435a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	2b05      	cmp	r3, #5
 8004362:	d827      	bhi.n	80043b4 <UART_SetConfig+0x550>
 8004364:	a201      	add	r2, pc, #4	; (adr r2, 800436c <UART_SetConfig+0x508>)
 8004366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436a:	bf00      	nop
 800436c:	08004385 	.word	0x08004385
 8004370:	0800438d 	.word	0x0800438d
 8004374:	08004395 	.word	0x08004395
 8004378:	0800439d 	.word	0x0800439d
 800437c:	080043a5 	.word	0x080043a5
 8004380:	080043ad 	.word	0x080043ad
 8004384:	2300      	movs	r3, #0
 8004386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800438a:	e053      	b.n	8004434 <UART_SetConfig+0x5d0>
 800438c:	2304      	movs	r3, #4
 800438e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004392:	e04f      	b.n	8004434 <UART_SetConfig+0x5d0>
 8004394:	2308      	movs	r3, #8
 8004396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800439a:	e04b      	b.n	8004434 <UART_SetConfig+0x5d0>
 800439c:	2310      	movs	r3, #16
 800439e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043a2:	e047      	b.n	8004434 <UART_SetConfig+0x5d0>
 80043a4:	2320      	movs	r3, #32
 80043a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043aa:	e043      	b.n	8004434 <UART_SetConfig+0x5d0>
 80043ac:	2340      	movs	r3, #64	; 0x40
 80043ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043b2:	e03f      	b.n	8004434 <UART_SetConfig+0x5d0>
 80043b4:	2380      	movs	r3, #128	; 0x80
 80043b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ba:	bf00      	nop
 80043bc:	e03a      	b.n	8004434 <UART_SetConfig+0x5d0>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a43      	ldr	r2, [pc, #268]	; (80044d0 <UART_SetConfig+0x66c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d132      	bne.n	800442e <UART_SetConfig+0x5ca>
 80043c8:	4b3e      	ldr	r3, [pc, #248]	; (80044c4 <UART_SetConfig+0x660>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	2b05      	cmp	r3, #5
 80043d2:	d827      	bhi.n	8004424 <UART_SetConfig+0x5c0>
 80043d4:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <UART_SetConfig+0x578>)
 80043d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043da:	bf00      	nop
 80043dc:	080043f5 	.word	0x080043f5
 80043e0:	080043fd 	.word	0x080043fd
 80043e4:	08004405 	.word	0x08004405
 80043e8:	0800440d 	.word	0x0800440d
 80043ec:	08004415 	.word	0x08004415
 80043f0:	0800441d 	.word	0x0800441d
 80043f4:	2302      	movs	r3, #2
 80043f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043fa:	e01b      	b.n	8004434 <UART_SetConfig+0x5d0>
 80043fc:	2304      	movs	r3, #4
 80043fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004402:	e017      	b.n	8004434 <UART_SetConfig+0x5d0>
 8004404:	2308      	movs	r3, #8
 8004406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800440a:	e013      	b.n	8004434 <UART_SetConfig+0x5d0>
 800440c:	2310      	movs	r3, #16
 800440e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004412:	e00f      	b.n	8004434 <UART_SetConfig+0x5d0>
 8004414:	2320      	movs	r3, #32
 8004416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800441a:	e00b      	b.n	8004434 <UART_SetConfig+0x5d0>
 800441c:	2340      	movs	r3, #64	; 0x40
 800441e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004422:	e007      	b.n	8004434 <UART_SetConfig+0x5d0>
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800442a:	bf00      	nop
 800442c:	e002      	b.n	8004434 <UART_SetConfig+0x5d0>
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a25      	ldr	r2, [pc, #148]	; (80044d0 <UART_SetConfig+0x66c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	f040 80b8 	bne.w	80045b0 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004440:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004444:	2b08      	cmp	r3, #8
 8004446:	d019      	beq.n	800447c <UART_SetConfig+0x618>
 8004448:	2b08      	cmp	r3, #8
 800444a:	dc04      	bgt.n	8004456 <UART_SetConfig+0x5f2>
 800444c:	2b02      	cmp	r3, #2
 800444e:	d009      	beq.n	8004464 <UART_SetConfig+0x600>
 8004450:	2b04      	cmp	r3, #4
 8004452:	d00b      	beq.n	800446c <UART_SetConfig+0x608>
 8004454:	e042      	b.n	80044dc <UART_SetConfig+0x678>
 8004456:	2b20      	cmp	r3, #32
 8004458:	d02b      	beq.n	80044b2 <UART_SetConfig+0x64e>
 800445a:	2b40      	cmp	r3, #64	; 0x40
 800445c:	d02c      	beq.n	80044b8 <UART_SetConfig+0x654>
 800445e:	2b10      	cmp	r3, #16
 8004460:	d014      	beq.n	800448c <UART_SetConfig+0x628>
 8004462:	e03b      	b.n	80044dc <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004464:	f7ff f806 	bl	8003474 <HAL_RCCEx_GetD3PCLK1Freq>
 8004468:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800446a:	e03d      	b.n	80044e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800446c:	f107 0314 	add.w	r3, r7, #20
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff f815 	bl	80034a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800447a:	e035      	b.n	80044e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800447c:	f107 0308 	add.w	r3, r7, #8
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff f959 	bl	8003738 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800448a:	e02d      	b.n	80044e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800448c:	4b0d      	ldr	r3, [pc, #52]	; (80044c4 <UART_SetConfig+0x660>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b00      	cmp	r3, #0
 8004496:	d009      	beq.n	80044ac <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004498:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <UART_SetConfig+0x660>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	08db      	lsrs	r3, r3, #3
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	4a0c      	ldr	r2, [pc, #48]	; (80044d4 <UART_SetConfig+0x670>)
 80044a4:	fa22 f303 	lsr.w	r3, r2, r3
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80044aa:	e01d      	b.n	80044e8 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80044ac:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <UART_SetConfig+0x670>)
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044b0:	e01a      	b.n	80044e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <UART_SetConfig+0x674>)
 80044b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044b6:	e017      	b.n	80044e8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044be:	e013      	b.n	80044e8 <UART_SetConfig+0x684>
 80044c0:	40011400 	.word	0x40011400
 80044c4:	58024400 	.word	0x58024400
 80044c8:	40007800 	.word	0x40007800
 80044cc:	40007c00 	.word	0x40007c00
 80044d0:	58000c00 	.word	0x58000c00
 80044d4:	03d09000 	.word	0x03d09000
 80044d8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80044e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 824d 	beq.w	800498a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	4aad      	ldr	r2, [pc, #692]	; (80047ac <UART_SetConfig+0x948>)
 80044f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044fa:	461a      	mov	r2, r3
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004502:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	4413      	add	r3, r2
 800450e:	6a3a      	ldr	r2, [r7, #32]
 8004510:	429a      	cmp	r2, r3
 8004512:	d305      	bcc.n	8004520 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800451a:	6a3a      	ldr	r2, [r7, #32]
 800451c:	429a      	cmp	r2, r3
 800451e:	d903      	bls.n	8004528 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004526:	e230      	b.n	800498a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	4618      	mov	r0, r3
 800452c:	f04f 0100 	mov.w	r1, #0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	4a9d      	ldr	r2, [pc, #628]	; (80047ac <UART_SetConfig+0x948>)
 8004536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800453a:	b29b      	uxth	r3, r3
 800453c:	f04f 0400 	mov.w	r4, #0
 8004540:	461a      	mov	r2, r3
 8004542:	4623      	mov	r3, r4
 8004544:	f7fb ff1c 	bl	8000380 <__aeabi_uldivmod>
 8004548:	4603      	mov	r3, r0
 800454a:	460c      	mov	r4, r1
 800454c:	4619      	mov	r1, r3
 800454e:	4622      	mov	r2, r4
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	f04f 0400 	mov.w	r4, #0
 8004558:	0214      	lsls	r4, r2, #8
 800455a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800455e:	020b      	lsls	r3, r1, #8
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6852      	ldr	r2, [r2, #4]
 8004564:	0852      	lsrs	r2, r2, #1
 8004566:	4611      	mov	r1, r2
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	eb13 0b01 	adds.w	fp, r3, r1
 8004570:	eb44 0c02 	adc.w	ip, r4, r2
 8004574:	4658      	mov	r0, fp
 8004576:	4661      	mov	r1, ip
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f04f 0400 	mov.w	r4, #0
 8004580:	461a      	mov	r2, r3
 8004582:	4623      	mov	r3, r4
 8004584:	f7fb fefc 	bl	8000380 <__aeabi_uldivmod>
 8004588:	4603      	mov	r3, r0
 800458a:	460c      	mov	r4, r1
 800458c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004594:	d308      	bcc.n	80045a8 <UART_SetConfig+0x744>
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800459c:	d204      	bcs.n	80045a8 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045a4:	60da      	str	r2, [r3, #12]
 80045a6:	e1f0      	b.n	800498a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80045ae:	e1ec      	b.n	800498a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b8:	f040 8100 	bne.w	80047bc <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80045bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	f200 80b7 	bhi.w	8004734 <UART_SetConfig+0x8d0>
 80045c6:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <UART_SetConfig+0x768>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	080046d1 	.word	0x080046d1
 80045d0:	080046d9 	.word	0x080046d9
 80045d4:	08004735 	.word	0x08004735
 80045d8:	08004735 	.word	0x08004735
 80045dc:	080046e1 	.word	0x080046e1
 80045e0:	08004735 	.word	0x08004735
 80045e4:	08004735 	.word	0x08004735
 80045e8:	08004735 	.word	0x08004735
 80045ec:	080046f1 	.word	0x080046f1
 80045f0:	08004735 	.word	0x08004735
 80045f4:	08004735 	.word	0x08004735
 80045f8:	08004735 	.word	0x08004735
 80045fc:	08004735 	.word	0x08004735
 8004600:	08004735 	.word	0x08004735
 8004604:	08004735 	.word	0x08004735
 8004608:	08004735 	.word	0x08004735
 800460c:	08004701 	.word	0x08004701
 8004610:	08004735 	.word	0x08004735
 8004614:	08004735 	.word	0x08004735
 8004618:	08004735 	.word	0x08004735
 800461c:	08004735 	.word	0x08004735
 8004620:	08004735 	.word	0x08004735
 8004624:	08004735 	.word	0x08004735
 8004628:	08004735 	.word	0x08004735
 800462c:	08004735 	.word	0x08004735
 8004630:	08004735 	.word	0x08004735
 8004634:	08004735 	.word	0x08004735
 8004638:	08004735 	.word	0x08004735
 800463c:	08004735 	.word	0x08004735
 8004640:	08004735 	.word	0x08004735
 8004644:	08004735 	.word	0x08004735
 8004648:	08004735 	.word	0x08004735
 800464c:	08004727 	.word	0x08004727
 8004650:	08004735 	.word	0x08004735
 8004654:	08004735 	.word	0x08004735
 8004658:	08004735 	.word	0x08004735
 800465c:	08004735 	.word	0x08004735
 8004660:	08004735 	.word	0x08004735
 8004664:	08004735 	.word	0x08004735
 8004668:	08004735 	.word	0x08004735
 800466c:	08004735 	.word	0x08004735
 8004670:	08004735 	.word	0x08004735
 8004674:	08004735 	.word	0x08004735
 8004678:	08004735 	.word	0x08004735
 800467c:	08004735 	.word	0x08004735
 8004680:	08004735 	.word	0x08004735
 8004684:	08004735 	.word	0x08004735
 8004688:	08004735 	.word	0x08004735
 800468c:	08004735 	.word	0x08004735
 8004690:	08004735 	.word	0x08004735
 8004694:	08004735 	.word	0x08004735
 8004698:	08004735 	.word	0x08004735
 800469c:	08004735 	.word	0x08004735
 80046a0:	08004735 	.word	0x08004735
 80046a4:	08004735 	.word	0x08004735
 80046a8:	08004735 	.word	0x08004735
 80046ac:	08004735 	.word	0x08004735
 80046b0:	08004735 	.word	0x08004735
 80046b4:	08004735 	.word	0x08004735
 80046b8:	08004735 	.word	0x08004735
 80046bc:	08004735 	.word	0x08004735
 80046c0:	08004735 	.word	0x08004735
 80046c4:	08004735 	.word	0x08004735
 80046c8:	08004735 	.word	0x08004735
 80046cc:	0800472d 	.word	0x0800472d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046d0:	f7fd ffb6 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 80046d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80046d6:	e033      	b.n	8004740 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046d8:	f7fd ffc8 	bl	800266c <HAL_RCC_GetPCLK2Freq>
 80046dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80046de:	e02f      	b.n	8004740 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046e0:	f107 0314 	add.w	r3, r7, #20
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fe fedb 	bl	80034a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046ee:	e027      	b.n	8004740 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046f0:	f107 0308 	add.w	r3, r7, #8
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff f81f 	bl	8003738 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046fe:	e01f      	b.n	8004740 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004700:	4b2b      	ldr	r3, [pc, #172]	; (80047b0 <UART_SetConfig+0x94c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d009      	beq.n	8004720 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800470c:	4b28      	ldr	r3, [pc, #160]	; (80047b0 <UART_SetConfig+0x94c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	08db      	lsrs	r3, r3, #3
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	4a27      	ldr	r2, [pc, #156]	; (80047b4 <UART_SetConfig+0x950>)
 8004718:	fa22 f303 	lsr.w	r3, r2, r3
 800471c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800471e:	e00f      	b.n	8004740 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8004720:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <UART_SetConfig+0x950>)
 8004722:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004724:	e00c      	b.n	8004740 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004726:	4b24      	ldr	r3, [pc, #144]	; (80047b8 <UART_SetConfig+0x954>)
 8004728:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800472a:	e009      	b.n	8004740 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800472c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004732:	e005      	b.n	8004740 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800473e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8121 	beq.w	800498a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	4a17      	ldr	r2, [pc, #92]	; (80047ac <UART_SetConfig+0x948>)
 800474e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004752:	461a      	mov	r2, r3
 8004754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004756:	fbb3 f3f2 	udiv	r3, r3, r2
 800475a:	005a      	lsls	r2, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	085b      	lsrs	r3, r3, #1
 8004762:	441a      	add	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	b29b      	uxth	r3, r3
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	2b0f      	cmp	r3, #15
 8004774:	d916      	bls.n	80047a4 <UART_SetConfig+0x940>
 8004776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477c:	d212      	bcs.n	80047a4 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	b29b      	uxth	r3, r3
 8004782:	f023 030f 	bic.w	r3, r3, #15
 8004786:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478a:	085b      	lsrs	r3, r3, #1
 800478c:	b29b      	uxth	r3, r3
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	b29a      	uxth	r2, r3
 8004794:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004796:	4313      	orrs	r3, r2
 8004798:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80047a0:	60da      	str	r2, [r3, #12]
 80047a2:	e0f2      	b.n	800498a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80047aa:	e0ee      	b.n	800498a <UART_SetConfig+0xb26>
 80047ac:	08005d48 	.word	0x08005d48
 80047b0:	58024400 	.word	0x58024400
 80047b4:	03d09000 	.word	0x03d09000
 80047b8:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80047bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	f200 80b7 	bhi.w	8004934 <UART_SetConfig+0xad0>
 80047c6:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <UART_SetConfig+0x968>)
 80047c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047cc:	080048d1 	.word	0x080048d1
 80047d0:	080048d9 	.word	0x080048d9
 80047d4:	08004935 	.word	0x08004935
 80047d8:	08004935 	.word	0x08004935
 80047dc:	080048e1 	.word	0x080048e1
 80047e0:	08004935 	.word	0x08004935
 80047e4:	08004935 	.word	0x08004935
 80047e8:	08004935 	.word	0x08004935
 80047ec:	080048f1 	.word	0x080048f1
 80047f0:	08004935 	.word	0x08004935
 80047f4:	08004935 	.word	0x08004935
 80047f8:	08004935 	.word	0x08004935
 80047fc:	08004935 	.word	0x08004935
 8004800:	08004935 	.word	0x08004935
 8004804:	08004935 	.word	0x08004935
 8004808:	08004935 	.word	0x08004935
 800480c:	08004901 	.word	0x08004901
 8004810:	08004935 	.word	0x08004935
 8004814:	08004935 	.word	0x08004935
 8004818:	08004935 	.word	0x08004935
 800481c:	08004935 	.word	0x08004935
 8004820:	08004935 	.word	0x08004935
 8004824:	08004935 	.word	0x08004935
 8004828:	08004935 	.word	0x08004935
 800482c:	08004935 	.word	0x08004935
 8004830:	08004935 	.word	0x08004935
 8004834:	08004935 	.word	0x08004935
 8004838:	08004935 	.word	0x08004935
 800483c:	08004935 	.word	0x08004935
 8004840:	08004935 	.word	0x08004935
 8004844:	08004935 	.word	0x08004935
 8004848:	08004935 	.word	0x08004935
 800484c:	08004927 	.word	0x08004927
 8004850:	08004935 	.word	0x08004935
 8004854:	08004935 	.word	0x08004935
 8004858:	08004935 	.word	0x08004935
 800485c:	08004935 	.word	0x08004935
 8004860:	08004935 	.word	0x08004935
 8004864:	08004935 	.word	0x08004935
 8004868:	08004935 	.word	0x08004935
 800486c:	08004935 	.word	0x08004935
 8004870:	08004935 	.word	0x08004935
 8004874:	08004935 	.word	0x08004935
 8004878:	08004935 	.word	0x08004935
 800487c:	08004935 	.word	0x08004935
 8004880:	08004935 	.word	0x08004935
 8004884:	08004935 	.word	0x08004935
 8004888:	08004935 	.word	0x08004935
 800488c:	08004935 	.word	0x08004935
 8004890:	08004935 	.word	0x08004935
 8004894:	08004935 	.word	0x08004935
 8004898:	08004935 	.word	0x08004935
 800489c:	08004935 	.word	0x08004935
 80048a0:	08004935 	.word	0x08004935
 80048a4:	08004935 	.word	0x08004935
 80048a8:	08004935 	.word	0x08004935
 80048ac:	08004935 	.word	0x08004935
 80048b0:	08004935 	.word	0x08004935
 80048b4:	08004935 	.word	0x08004935
 80048b8:	08004935 	.word	0x08004935
 80048bc:	08004935 	.word	0x08004935
 80048c0:	08004935 	.word	0x08004935
 80048c4:	08004935 	.word	0x08004935
 80048c8:	08004935 	.word	0x08004935
 80048cc:	0800492d 	.word	0x0800492d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d0:	f7fd feb6 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 80048d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80048d6:	e033      	b.n	8004940 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d8:	f7fd fec8 	bl	800266c <HAL_RCC_GetPCLK2Freq>
 80048dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80048de:	e02f      	b.n	8004940 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048e0:	f107 0314 	add.w	r3, r7, #20
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fe fddb 	bl	80034a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048ee:	e027      	b.n	8004940 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048f0:	f107 0308 	add.w	r3, r7, #8
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fe ff1f 	bl	8003738 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048fe:	e01f      	b.n	8004940 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004900:	4b2c      	ldr	r3, [pc, #176]	; (80049b4 <UART_SetConfig+0xb50>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b00      	cmp	r3, #0
 800490a:	d009      	beq.n	8004920 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800490c:	4b29      	ldr	r3, [pc, #164]	; (80049b4 <UART_SetConfig+0xb50>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	08db      	lsrs	r3, r3, #3
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	4a28      	ldr	r2, [pc, #160]	; (80049b8 <UART_SetConfig+0xb54>)
 8004918:	fa22 f303 	lsr.w	r3, r2, r3
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800491e:	e00f      	b.n	8004940 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8004920:	4b25      	ldr	r3, [pc, #148]	; (80049b8 <UART_SetConfig+0xb54>)
 8004922:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004924:	e00c      	b.n	8004940 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004926:	4b25      	ldr	r3, [pc, #148]	; (80049bc <UART_SetConfig+0xb58>)
 8004928:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800492a:	e009      	b.n	8004940 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004930:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004932:	e005      	b.n	8004940 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800493e:	bf00      	nop
    }

    if (pclk != 0U)
 8004940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004942:	2b00      	cmp	r3, #0
 8004944:	d021      	beq.n	800498a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	4a1d      	ldr	r2, [pc, #116]	; (80049c0 <UART_SetConfig+0xb5c>)
 800494c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004950:	461a      	mov	r2, r3
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	fbb3 f2f2 	udiv	r2, r3, r2
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	085b      	lsrs	r3, r3, #1
 800495e:	441a      	add	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	b29b      	uxth	r3, r3
 800496a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	2b0f      	cmp	r3, #15
 8004970:	d908      	bls.n	8004984 <UART_SetConfig+0xb20>
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004978:	d204      	bcs.n	8004984 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004980:	60da      	str	r2, [r3, #12]
 8004982:	e002      	b.n	800498a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80049a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3738      	adds	r7, #56	; 0x38
 80049ae:	46bd      	mov	sp, r7
 80049b0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80049b4:	58024400 	.word	0x58024400
 80049b8:	03d09000 	.word	0x03d09000
 80049bc:	003d0900 	.word	0x003d0900
 80049c0:	08005d48 	.word	0x08005d48

080049c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a58:	f003 0310 	and.w	r3, r3, #16
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01a      	beq.n	8004ada <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac2:	d10a      	bne.n	8004ada <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	605a      	str	r2, [r3, #4]
  }
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004b18:	f7fc fa68 	bl	8000fec <HAL_GetTick>
 8004b1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d10e      	bne.n	8004b4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f82c 	bl	8004b98 <UART_WaitOnFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e022      	b.n	8004b90 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d10e      	bne.n	8004b76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f816 	bl	8004b98 <UART_WaitOnFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e00c      	b.n	8004b90 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba8:	e062      	b.n	8004c70 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb0:	d05e      	beq.n	8004c70 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb2:	f7fc fa1b 	bl	8000fec <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d302      	bcc.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d11d      	bne.n	8004c04 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bd6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e045      	b.n	8004c90 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d02e      	beq.n	8004c70 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c20:	d126      	bne.n	8004c70 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c3a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0201 	bic.w	r2, r2, #1
 8004c4a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e00f      	b.n	8004c90 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69da      	ldr	r2, [r3, #28]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	bf0c      	ite	eq
 8004c80:	2301      	moveq	r3, #1
 8004c82:	2300      	movne	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	461a      	mov	r2, r3
 8004c88:	79fb      	ldrb	r3, [r7, #7]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d08d      	beq.n	8004baa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_UARTEx_DisableFifoMode+0x16>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e027      	b.n	8004cfe <HAL_UARTEx_DisableFifoMode+0x66>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2224      	movs	r2, #36	; 0x24
 8004cba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 0201 	bic.w	r2, r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004cdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e02d      	b.n	8004d7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2224      	movs	r2, #36	; 0x24
 8004d2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0201 	bic.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f850 	bl	8004e04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e02d      	b.n	8004dfa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2224      	movs	r2, #36	; 0x24
 8004daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f812 	bl	8004e04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b089      	sub	sp, #36	; 0x24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004e0c:	4a2f      	ldr	r2, [pc, #188]	; (8004ecc <UARTEx_SetNbDataToProcess+0xc8>)
 8004e0e:	f107 0314 	add.w	r3, r7, #20
 8004e12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e16:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004e1a:	4a2d      	ldr	r2, [pc, #180]	; (8004ed0 <UARTEx_SetNbDataToProcess+0xcc>)
 8004e1c:	f107 030c 	add.w	r3, r7, #12
 8004e20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e24:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d108      	bne.n	8004e42 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e40:	e03d      	b.n	8004ebe <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e42:	2310      	movs	r3, #16
 8004e44:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e46:	2310      	movs	r3, #16
 8004e48:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	0e5b      	lsrs	r3, r3, #25
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	0f5b      	lsrs	r3, r3, #29
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004e6a:	7fbb      	ldrb	r3, [r7, #30]
 8004e6c:	7f3a      	ldrb	r2, [r7, #28]
 8004e6e:	f107 0120 	add.w	r1, r7, #32
 8004e72:	440a      	add	r2, r1
 8004e74:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004e78:	fb02 f303 	mul.w	r3, r2, r3
 8004e7c:	7f3a      	ldrb	r2, [r7, #28]
 8004e7e:	f107 0120 	add.w	r1, r7, #32
 8004e82:	440a      	add	r2, r1
 8004e84:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004e88:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004e94:	7ffb      	ldrb	r3, [r7, #31]
 8004e96:	7f7a      	ldrb	r2, [r7, #29]
 8004e98:	f107 0120 	add.w	r1, r7, #32
 8004e9c:	440a      	add	r2, r1
 8004e9e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004ea2:	fb02 f303 	mul.w	r3, r2, r3
 8004ea6:	7f7a      	ldrb	r2, [r7, #29]
 8004ea8:	f107 0120 	add.w	r1, r7, #32
 8004eac:	440a      	add	r2, r1
 8004eae:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004eb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ebe:	bf00      	nop
 8004ec0:	3724      	adds	r7, #36	; 0x24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	08005d28 	.word	0x08005d28
 8004ed0:	08005d30 	.word	0x08005d30

08004ed4 <__errno>:
 8004ed4:	4b01      	ldr	r3, [pc, #4]	; (8004edc <__errno+0x8>)
 8004ed6:	6818      	ldr	r0, [r3, #0]
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	24000010 	.word	0x24000010

08004ee0 <__libc_init_array>:
 8004ee0:	b570      	push	{r4, r5, r6, lr}
 8004ee2:	4e0d      	ldr	r6, [pc, #52]	; (8004f18 <__libc_init_array+0x38>)
 8004ee4:	4c0d      	ldr	r4, [pc, #52]	; (8004f1c <__libc_init_array+0x3c>)
 8004ee6:	1ba4      	subs	r4, r4, r6
 8004ee8:	10a4      	asrs	r4, r4, #2
 8004eea:	2500      	movs	r5, #0
 8004eec:	42a5      	cmp	r5, r4
 8004eee:	d109      	bne.n	8004f04 <__libc_init_array+0x24>
 8004ef0:	4e0b      	ldr	r6, [pc, #44]	; (8004f20 <__libc_init_array+0x40>)
 8004ef2:	4c0c      	ldr	r4, [pc, #48]	; (8004f24 <__libc_init_array+0x44>)
 8004ef4:	f000 ff04 	bl	8005d00 <_init>
 8004ef8:	1ba4      	subs	r4, r4, r6
 8004efa:	10a4      	asrs	r4, r4, #2
 8004efc:	2500      	movs	r5, #0
 8004efe:	42a5      	cmp	r5, r4
 8004f00:	d105      	bne.n	8004f0e <__libc_init_array+0x2e>
 8004f02:	bd70      	pop	{r4, r5, r6, pc}
 8004f04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f08:	4798      	blx	r3
 8004f0a:	3501      	adds	r5, #1
 8004f0c:	e7ee      	b.n	8004eec <__libc_init_array+0xc>
 8004f0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f12:	4798      	blx	r3
 8004f14:	3501      	adds	r5, #1
 8004f16:	e7f2      	b.n	8004efe <__libc_init_array+0x1e>
 8004f18:	08005e00 	.word	0x08005e00
 8004f1c:	08005e00 	.word	0x08005e00
 8004f20:	08005e00 	.word	0x08005e00
 8004f24:	08005e04 	.word	0x08005e04

08004f28 <memset>:
 8004f28:	4402      	add	r2, r0
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d100      	bne.n	8004f32 <memset+0xa>
 8004f30:	4770      	bx	lr
 8004f32:	f803 1b01 	strb.w	r1, [r3], #1
 8004f36:	e7f9      	b.n	8004f2c <memset+0x4>

08004f38 <iprintf>:
 8004f38:	b40f      	push	{r0, r1, r2, r3}
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <iprintf+0x2c>)
 8004f3c:	b513      	push	{r0, r1, r4, lr}
 8004f3e:	681c      	ldr	r4, [r3, #0]
 8004f40:	b124      	cbz	r4, 8004f4c <iprintf+0x14>
 8004f42:	69a3      	ldr	r3, [r4, #24]
 8004f44:	b913      	cbnz	r3, 8004f4c <iprintf+0x14>
 8004f46:	4620      	mov	r0, r4
 8004f48:	f000 f84e 	bl	8004fe8 <__sinit>
 8004f4c:	ab05      	add	r3, sp, #20
 8004f4e:	9a04      	ldr	r2, [sp, #16]
 8004f50:	68a1      	ldr	r1, [r4, #8]
 8004f52:	9301      	str	r3, [sp, #4]
 8004f54:	4620      	mov	r0, r4
 8004f56:	f000 f955 	bl	8005204 <_vfiprintf_r>
 8004f5a:	b002      	add	sp, #8
 8004f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f60:	b004      	add	sp, #16
 8004f62:	4770      	bx	lr
 8004f64:	24000010 	.word	0x24000010

08004f68 <std>:
 8004f68:	2300      	movs	r3, #0
 8004f6a:	b510      	push	{r4, lr}
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8004f72:	6083      	str	r3, [r0, #8]
 8004f74:	8181      	strh	r1, [r0, #12]
 8004f76:	6643      	str	r3, [r0, #100]	; 0x64
 8004f78:	81c2      	strh	r2, [r0, #14]
 8004f7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f7e:	6183      	str	r3, [r0, #24]
 8004f80:	4619      	mov	r1, r3
 8004f82:	2208      	movs	r2, #8
 8004f84:	305c      	adds	r0, #92	; 0x5c
 8004f86:	f7ff ffcf 	bl	8004f28 <memset>
 8004f8a:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <std+0x38>)
 8004f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8004f8e:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <std+0x3c>)
 8004f90:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f92:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <std+0x40>)
 8004f94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f96:	4b05      	ldr	r3, [pc, #20]	; (8004fac <std+0x44>)
 8004f98:	6224      	str	r4, [r4, #32]
 8004f9a:	6323      	str	r3, [r4, #48]	; 0x30
 8004f9c:	bd10      	pop	{r4, pc}
 8004f9e:	bf00      	nop
 8004fa0:	08005761 	.word	0x08005761
 8004fa4:	08005783 	.word	0x08005783
 8004fa8:	080057bb 	.word	0x080057bb
 8004fac:	080057df 	.word	0x080057df

08004fb0 <_cleanup_r>:
 8004fb0:	4901      	ldr	r1, [pc, #4]	; (8004fb8 <_cleanup_r+0x8>)
 8004fb2:	f000 b885 	b.w	80050c0 <_fwalk_reent>
 8004fb6:	bf00      	nop
 8004fb8:	08005ab9 	.word	0x08005ab9

08004fbc <__sfmoreglue>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	1e4a      	subs	r2, r1, #1
 8004fc0:	2568      	movs	r5, #104	; 0x68
 8004fc2:	4355      	muls	r5, r2
 8004fc4:	460e      	mov	r6, r1
 8004fc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004fca:	f000 f897 	bl	80050fc <_malloc_r>
 8004fce:	4604      	mov	r4, r0
 8004fd0:	b140      	cbz	r0, 8004fe4 <__sfmoreglue+0x28>
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	e9c0 1600 	strd	r1, r6, [r0]
 8004fd8:	300c      	adds	r0, #12
 8004fda:	60a0      	str	r0, [r4, #8]
 8004fdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fe0:	f7ff ffa2 	bl	8004f28 <memset>
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	bd70      	pop	{r4, r5, r6, pc}

08004fe8 <__sinit>:
 8004fe8:	6983      	ldr	r3, [r0, #24]
 8004fea:	b510      	push	{r4, lr}
 8004fec:	4604      	mov	r4, r0
 8004fee:	bb33      	cbnz	r3, 800503e <__sinit+0x56>
 8004ff0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004ff4:	6503      	str	r3, [r0, #80]	; 0x50
 8004ff6:	4b12      	ldr	r3, [pc, #72]	; (8005040 <__sinit+0x58>)
 8004ff8:	4a12      	ldr	r2, [pc, #72]	; (8005044 <__sinit+0x5c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6282      	str	r2, [r0, #40]	; 0x28
 8004ffe:	4298      	cmp	r0, r3
 8005000:	bf04      	itt	eq
 8005002:	2301      	moveq	r3, #1
 8005004:	6183      	streq	r3, [r0, #24]
 8005006:	f000 f81f 	bl	8005048 <__sfp>
 800500a:	6060      	str	r0, [r4, #4]
 800500c:	4620      	mov	r0, r4
 800500e:	f000 f81b 	bl	8005048 <__sfp>
 8005012:	60a0      	str	r0, [r4, #8]
 8005014:	4620      	mov	r0, r4
 8005016:	f000 f817 	bl	8005048 <__sfp>
 800501a:	2200      	movs	r2, #0
 800501c:	60e0      	str	r0, [r4, #12]
 800501e:	2104      	movs	r1, #4
 8005020:	6860      	ldr	r0, [r4, #4]
 8005022:	f7ff ffa1 	bl	8004f68 <std>
 8005026:	2201      	movs	r2, #1
 8005028:	2109      	movs	r1, #9
 800502a:	68a0      	ldr	r0, [r4, #8]
 800502c:	f7ff ff9c 	bl	8004f68 <std>
 8005030:	2202      	movs	r2, #2
 8005032:	2112      	movs	r1, #18
 8005034:	68e0      	ldr	r0, [r4, #12]
 8005036:	f7ff ff97 	bl	8004f68 <std>
 800503a:	2301      	movs	r3, #1
 800503c:	61a3      	str	r3, [r4, #24]
 800503e:	bd10      	pop	{r4, pc}
 8005040:	08005d60 	.word	0x08005d60
 8005044:	08004fb1 	.word	0x08004fb1

08005048 <__sfp>:
 8005048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504a:	4b1b      	ldr	r3, [pc, #108]	; (80050b8 <__sfp+0x70>)
 800504c:	681e      	ldr	r6, [r3, #0]
 800504e:	69b3      	ldr	r3, [r6, #24]
 8005050:	4607      	mov	r7, r0
 8005052:	b913      	cbnz	r3, 800505a <__sfp+0x12>
 8005054:	4630      	mov	r0, r6
 8005056:	f7ff ffc7 	bl	8004fe8 <__sinit>
 800505a:	3648      	adds	r6, #72	; 0x48
 800505c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005060:	3b01      	subs	r3, #1
 8005062:	d503      	bpl.n	800506c <__sfp+0x24>
 8005064:	6833      	ldr	r3, [r6, #0]
 8005066:	b133      	cbz	r3, 8005076 <__sfp+0x2e>
 8005068:	6836      	ldr	r6, [r6, #0]
 800506a:	e7f7      	b.n	800505c <__sfp+0x14>
 800506c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005070:	b16d      	cbz	r5, 800508e <__sfp+0x46>
 8005072:	3468      	adds	r4, #104	; 0x68
 8005074:	e7f4      	b.n	8005060 <__sfp+0x18>
 8005076:	2104      	movs	r1, #4
 8005078:	4638      	mov	r0, r7
 800507a:	f7ff ff9f 	bl	8004fbc <__sfmoreglue>
 800507e:	6030      	str	r0, [r6, #0]
 8005080:	2800      	cmp	r0, #0
 8005082:	d1f1      	bne.n	8005068 <__sfp+0x20>
 8005084:	230c      	movs	r3, #12
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	4604      	mov	r4, r0
 800508a:	4620      	mov	r0, r4
 800508c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800508e:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <__sfp+0x74>)
 8005090:	6665      	str	r5, [r4, #100]	; 0x64
 8005092:	e9c4 5500 	strd	r5, r5, [r4]
 8005096:	60a5      	str	r5, [r4, #8]
 8005098:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800509c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80050a0:	2208      	movs	r2, #8
 80050a2:	4629      	mov	r1, r5
 80050a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80050a8:	f7ff ff3e 	bl	8004f28 <memset>
 80050ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050b4:	e7e9      	b.n	800508a <__sfp+0x42>
 80050b6:	bf00      	nop
 80050b8:	08005d60 	.word	0x08005d60
 80050bc:	ffff0001 	.word	0xffff0001

080050c0 <_fwalk_reent>:
 80050c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050c4:	4680      	mov	r8, r0
 80050c6:	4689      	mov	r9, r1
 80050c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80050cc:	2600      	movs	r6, #0
 80050ce:	b914      	cbnz	r4, 80050d6 <_fwalk_reent+0x16>
 80050d0:	4630      	mov	r0, r6
 80050d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80050da:	3f01      	subs	r7, #1
 80050dc:	d501      	bpl.n	80050e2 <_fwalk_reent+0x22>
 80050de:	6824      	ldr	r4, [r4, #0]
 80050e0:	e7f5      	b.n	80050ce <_fwalk_reent+0xe>
 80050e2:	89ab      	ldrh	r3, [r5, #12]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d907      	bls.n	80050f8 <_fwalk_reent+0x38>
 80050e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050ec:	3301      	adds	r3, #1
 80050ee:	d003      	beq.n	80050f8 <_fwalk_reent+0x38>
 80050f0:	4629      	mov	r1, r5
 80050f2:	4640      	mov	r0, r8
 80050f4:	47c8      	blx	r9
 80050f6:	4306      	orrs	r6, r0
 80050f8:	3568      	adds	r5, #104	; 0x68
 80050fa:	e7ee      	b.n	80050da <_fwalk_reent+0x1a>

080050fc <_malloc_r>:
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	1ccd      	adds	r5, r1, #3
 8005100:	f025 0503 	bic.w	r5, r5, #3
 8005104:	3508      	adds	r5, #8
 8005106:	2d0c      	cmp	r5, #12
 8005108:	bf38      	it	cc
 800510a:	250c      	movcc	r5, #12
 800510c:	2d00      	cmp	r5, #0
 800510e:	4606      	mov	r6, r0
 8005110:	db01      	blt.n	8005116 <_malloc_r+0x1a>
 8005112:	42a9      	cmp	r1, r5
 8005114:	d903      	bls.n	800511e <_malloc_r+0x22>
 8005116:	230c      	movs	r3, #12
 8005118:	6033      	str	r3, [r6, #0]
 800511a:	2000      	movs	r0, #0
 800511c:	bd70      	pop	{r4, r5, r6, pc}
 800511e:	f000 fd6b 	bl	8005bf8 <__malloc_lock>
 8005122:	4a21      	ldr	r2, [pc, #132]	; (80051a8 <_malloc_r+0xac>)
 8005124:	6814      	ldr	r4, [r2, #0]
 8005126:	4621      	mov	r1, r4
 8005128:	b991      	cbnz	r1, 8005150 <_malloc_r+0x54>
 800512a:	4c20      	ldr	r4, [pc, #128]	; (80051ac <_malloc_r+0xb0>)
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	b91b      	cbnz	r3, 8005138 <_malloc_r+0x3c>
 8005130:	4630      	mov	r0, r6
 8005132:	f000 fb05 	bl	8005740 <_sbrk_r>
 8005136:	6020      	str	r0, [r4, #0]
 8005138:	4629      	mov	r1, r5
 800513a:	4630      	mov	r0, r6
 800513c:	f000 fb00 	bl	8005740 <_sbrk_r>
 8005140:	1c43      	adds	r3, r0, #1
 8005142:	d124      	bne.n	800518e <_malloc_r+0x92>
 8005144:	230c      	movs	r3, #12
 8005146:	6033      	str	r3, [r6, #0]
 8005148:	4630      	mov	r0, r6
 800514a:	f000 fd56 	bl	8005bfa <__malloc_unlock>
 800514e:	e7e4      	b.n	800511a <_malloc_r+0x1e>
 8005150:	680b      	ldr	r3, [r1, #0]
 8005152:	1b5b      	subs	r3, r3, r5
 8005154:	d418      	bmi.n	8005188 <_malloc_r+0x8c>
 8005156:	2b0b      	cmp	r3, #11
 8005158:	d90f      	bls.n	800517a <_malloc_r+0x7e>
 800515a:	600b      	str	r3, [r1, #0]
 800515c:	50cd      	str	r5, [r1, r3]
 800515e:	18cc      	adds	r4, r1, r3
 8005160:	4630      	mov	r0, r6
 8005162:	f000 fd4a 	bl	8005bfa <__malloc_unlock>
 8005166:	f104 000b 	add.w	r0, r4, #11
 800516a:	1d23      	adds	r3, r4, #4
 800516c:	f020 0007 	bic.w	r0, r0, #7
 8005170:	1ac3      	subs	r3, r0, r3
 8005172:	d0d3      	beq.n	800511c <_malloc_r+0x20>
 8005174:	425a      	negs	r2, r3
 8005176:	50e2      	str	r2, [r4, r3]
 8005178:	e7d0      	b.n	800511c <_malloc_r+0x20>
 800517a:	428c      	cmp	r4, r1
 800517c:	684b      	ldr	r3, [r1, #4]
 800517e:	bf16      	itet	ne
 8005180:	6063      	strne	r3, [r4, #4]
 8005182:	6013      	streq	r3, [r2, #0]
 8005184:	460c      	movne	r4, r1
 8005186:	e7eb      	b.n	8005160 <_malloc_r+0x64>
 8005188:	460c      	mov	r4, r1
 800518a:	6849      	ldr	r1, [r1, #4]
 800518c:	e7cc      	b.n	8005128 <_malloc_r+0x2c>
 800518e:	1cc4      	adds	r4, r0, #3
 8005190:	f024 0403 	bic.w	r4, r4, #3
 8005194:	42a0      	cmp	r0, r4
 8005196:	d005      	beq.n	80051a4 <_malloc_r+0xa8>
 8005198:	1a21      	subs	r1, r4, r0
 800519a:	4630      	mov	r0, r6
 800519c:	f000 fad0 	bl	8005740 <_sbrk_r>
 80051a0:	3001      	adds	r0, #1
 80051a2:	d0cf      	beq.n	8005144 <_malloc_r+0x48>
 80051a4:	6025      	str	r5, [r4, #0]
 80051a6:	e7db      	b.n	8005160 <_malloc_r+0x64>
 80051a8:	24000094 	.word	0x24000094
 80051ac:	24000098 	.word	0x24000098

080051b0 <__sfputc_r>:
 80051b0:	6893      	ldr	r3, [r2, #8]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	b410      	push	{r4}
 80051b8:	6093      	str	r3, [r2, #8]
 80051ba:	da08      	bge.n	80051ce <__sfputc_r+0x1e>
 80051bc:	6994      	ldr	r4, [r2, #24]
 80051be:	42a3      	cmp	r3, r4
 80051c0:	db01      	blt.n	80051c6 <__sfputc_r+0x16>
 80051c2:	290a      	cmp	r1, #10
 80051c4:	d103      	bne.n	80051ce <__sfputc_r+0x1e>
 80051c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051ca:	f000 bb0d 	b.w	80057e8 <__swbuf_r>
 80051ce:	6813      	ldr	r3, [r2, #0]
 80051d0:	1c58      	adds	r0, r3, #1
 80051d2:	6010      	str	r0, [r2, #0]
 80051d4:	7019      	strb	r1, [r3, #0]
 80051d6:	4608      	mov	r0, r1
 80051d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051dc:	4770      	bx	lr

080051de <__sfputs_r>:
 80051de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e0:	4606      	mov	r6, r0
 80051e2:	460f      	mov	r7, r1
 80051e4:	4614      	mov	r4, r2
 80051e6:	18d5      	adds	r5, r2, r3
 80051e8:	42ac      	cmp	r4, r5
 80051ea:	d101      	bne.n	80051f0 <__sfputs_r+0x12>
 80051ec:	2000      	movs	r0, #0
 80051ee:	e007      	b.n	8005200 <__sfputs_r+0x22>
 80051f0:	463a      	mov	r2, r7
 80051f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051f6:	4630      	mov	r0, r6
 80051f8:	f7ff ffda 	bl	80051b0 <__sfputc_r>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d1f3      	bne.n	80051e8 <__sfputs_r+0xa>
 8005200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005204 <_vfiprintf_r>:
 8005204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005208:	460c      	mov	r4, r1
 800520a:	b09d      	sub	sp, #116	; 0x74
 800520c:	4617      	mov	r7, r2
 800520e:	461d      	mov	r5, r3
 8005210:	4606      	mov	r6, r0
 8005212:	b118      	cbz	r0, 800521c <_vfiprintf_r+0x18>
 8005214:	6983      	ldr	r3, [r0, #24]
 8005216:	b90b      	cbnz	r3, 800521c <_vfiprintf_r+0x18>
 8005218:	f7ff fee6 	bl	8004fe8 <__sinit>
 800521c:	4b7c      	ldr	r3, [pc, #496]	; (8005410 <_vfiprintf_r+0x20c>)
 800521e:	429c      	cmp	r4, r3
 8005220:	d158      	bne.n	80052d4 <_vfiprintf_r+0xd0>
 8005222:	6874      	ldr	r4, [r6, #4]
 8005224:	89a3      	ldrh	r3, [r4, #12]
 8005226:	0718      	lsls	r0, r3, #28
 8005228:	d55e      	bpl.n	80052e8 <_vfiprintf_r+0xe4>
 800522a:	6923      	ldr	r3, [r4, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d05b      	beq.n	80052e8 <_vfiprintf_r+0xe4>
 8005230:	2300      	movs	r3, #0
 8005232:	9309      	str	r3, [sp, #36]	; 0x24
 8005234:	2320      	movs	r3, #32
 8005236:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800523a:	2330      	movs	r3, #48	; 0x30
 800523c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005240:	9503      	str	r5, [sp, #12]
 8005242:	f04f 0b01 	mov.w	fp, #1
 8005246:	46b8      	mov	r8, r7
 8005248:	4645      	mov	r5, r8
 800524a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800524e:	b10b      	cbz	r3, 8005254 <_vfiprintf_r+0x50>
 8005250:	2b25      	cmp	r3, #37	; 0x25
 8005252:	d154      	bne.n	80052fe <_vfiprintf_r+0xfa>
 8005254:	ebb8 0a07 	subs.w	sl, r8, r7
 8005258:	d00b      	beq.n	8005272 <_vfiprintf_r+0x6e>
 800525a:	4653      	mov	r3, sl
 800525c:	463a      	mov	r2, r7
 800525e:	4621      	mov	r1, r4
 8005260:	4630      	mov	r0, r6
 8005262:	f7ff ffbc 	bl	80051de <__sfputs_r>
 8005266:	3001      	adds	r0, #1
 8005268:	f000 80c2 	beq.w	80053f0 <_vfiprintf_r+0x1ec>
 800526c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800526e:	4453      	add	r3, sl
 8005270:	9309      	str	r3, [sp, #36]	; 0x24
 8005272:	f898 3000 	ldrb.w	r3, [r8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 80ba 	beq.w	80053f0 <_vfiprintf_r+0x1ec>
 800527c:	2300      	movs	r3, #0
 800527e:	f04f 32ff 	mov.w	r2, #4294967295
 8005282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005286:	9304      	str	r3, [sp, #16]
 8005288:	9307      	str	r3, [sp, #28]
 800528a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800528e:	931a      	str	r3, [sp, #104]	; 0x68
 8005290:	46a8      	mov	r8, r5
 8005292:	2205      	movs	r2, #5
 8005294:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005298:	485e      	ldr	r0, [pc, #376]	; (8005414 <_vfiprintf_r+0x210>)
 800529a:	f7fb f821 	bl	80002e0 <memchr>
 800529e:	9b04      	ldr	r3, [sp, #16]
 80052a0:	bb78      	cbnz	r0, 8005302 <_vfiprintf_r+0xfe>
 80052a2:	06d9      	lsls	r1, r3, #27
 80052a4:	bf44      	itt	mi
 80052a6:	2220      	movmi	r2, #32
 80052a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052ac:	071a      	lsls	r2, r3, #28
 80052ae:	bf44      	itt	mi
 80052b0:	222b      	movmi	r2, #43	; 0x2b
 80052b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052b6:	782a      	ldrb	r2, [r5, #0]
 80052b8:	2a2a      	cmp	r2, #42	; 0x2a
 80052ba:	d02a      	beq.n	8005312 <_vfiprintf_r+0x10e>
 80052bc:	9a07      	ldr	r2, [sp, #28]
 80052be:	46a8      	mov	r8, r5
 80052c0:	2000      	movs	r0, #0
 80052c2:	250a      	movs	r5, #10
 80052c4:	4641      	mov	r1, r8
 80052c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052ca:	3b30      	subs	r3, #48	; 0x30
 80052cc:	2b09      	cmp	r3, #9
 80052ce:	d969      	bls.n	80053a4 <_vfiprintf_r+0x1a0>
 80052d0:	b360      	cbz	r0, 800532c <_vfiprintf_r+0x128>
 80052d2:	e024      	b.n	800531e <_vfiprintf_r+0x11a>
 80052d4:	4b50      	ldr	r3, [pc, #320]	; (8005418 <_vfiprintf_r+0x214>)
 80052d6:	429c      	cmp	r4, r3
 80052d8:	d101      	bne.n	80052de <_vfiprintf_r+0xda>
 80052da:	68b4      	ldr	r4, [r6, #8]
 80052dc:	e7a2      	b.n	8005224 <_vfiprintf_r+0x20>
 80052de:	4b4f      	ldr	r3, [pc, #316]	; (800541c <_vfiprintf_r+0x218>)
 80052e0:	429c      	cmp	r4, r3
 80052e2:	bf08      	it	eq
 80052e4:	68f4      	ldreq	r4, [r6, #12]
 80052e6:	e79d      	b.n	8005224 <_vfiprintf_r+0x20>
 80052e8:	4621      	mov	r1, r4
 80052ea:	4630      	mov	r0, r6
 80052ec:	f000 fae0 	bl	80058b0 <__swsetup_r>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	d09d      	beq.n	8005230 <_vfiprintf_r+0x2c>
 80052f4:	f04f 30ff 	mov.w	r0, #4294967295
 80052f8:	b01d      	add	sp, #116	; 0x74
 80052fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052fe:	46a8      	mov	r8, r5
 8005300:	e7a2      	b.n	8005248 <_vfiprintf_r+0x44>
 8005302:	4a44      	ldr	r2, [pc, #272]	; (8005414 <_vfiprintf_r+0x210>)
 8005304:	1a80      	subs	r0, r0, r2
 8005306:	fa0b f000 	lsl.w	r0, fp, r0
 800530a:	4318      	orrs	r0, r3
 800530c:	9004      	str	r0, [sp, #16]
 800530e:	4645      	mov	r5, r8
 8005310:	e7be      	b.n	8005290 <_vfiprintf_r+0x8c>
 8005312:	9a03      	ldr	r2, [sp, #12]
 8005314:	1d11      	adds	r1, r2, #4
 8005316:	6812      	ldr	r2, [r2, #0]
 8005318:	9103      	str	r1, [sp, #12]
 800531a:	2a00      	cmp	r2, #0
 800531c:	db01      	blt.n	8005322 <_vfiprintf_r+0x11e>
 800531e:	9207      	str	r2, [sp, #28]
 8005320:	e004      	b.n	800532c <_vfiprintf_r+0x128>
 8005322:	4252      	negs	r2, r2
 8005324:	f043 0302 	orr.w	r3, r3, #2
 8005328:	9207      	str	r2, [sp, #28]
 800532a:	9304      	str	r3, [sp, #16]
 800532c:	f898 3000 	ldrb.w	r3, [r8]
 8005330:	2b2e      	cmp	r3, #46	; 0x2e
 8005332:	d10e      	bne.n	8005352 <_vfiprintf_r+0x14e>
 8005334:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005338:	2b2a      	cmp	r3, #42	; 0x2a
 800533a:	d138      	bne.n	80053ae <_vfiprintf_r+0x1aa>
 800533c:	9b03      	ldr	r3, [sp, #12]
 800533e:	1d1a      	adds	r2, r3, #4
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	9203      	str	r2, [sp, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	bfb8      	it	lt
 8005348:	f04f 33ff 	movlt.w	r3, #4294967295
 800534c:	f108 0802 	add.w	r8, r8, #2
 8005350:	9305      	str	r3, [sp, #20]
 8005352:	4d33      	ldr	r5, [pc, #204]	; (8005420 <_vfiprintf_r+0x21c>)
 8005354:	f898 1000 	ldrb.w	r1, [r8]
 8005358:	2203      	movs	r2, #3
 800535a:	4628      	mov	r0, r5
 800535c:	f7fa ffc0 	bl	80002e0 <memchr>
 8005360:	b140      	cbz	r0, 8005374 <_vfiprintf_r+0x170>
 8005362:	2340      	movs	r3, #64	; 0x40
 8005364:	1b40      	subs	r0, r0, r5
 8005366:	fa03 f000 	lsl.w	r0, r3, r0
 800536a:	9b04      	ldr	r3, [sp, #16]
 800536c:	4303      	orrs	r3, r0
 800536e:	f108 0801 	add.w	r8, r8, #1
 8005372:	9304      	str	r3, [sp, #16]
 8005374:	f898 1000 	ldrb.w	r1, [r8]
 8005378:	482a      	ldr	r0, [pc, #168]	; (8005424 <_vfiprintf_r+0x220>)
 800537a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800537e:	2206      	movs	r2, #6
 8005380:	f108 0701 	add.w	r7, r8, #1
 8005384:	f7fa ffac 	bl	80002e0 <memchr>
 8005388:	2800      	cmp	r0, #0
 800538a:	d037      	beq.n	80053fc <_vfiprintf_r+0x1f8>
 800538c:	4b26      	ldr	r3, [pc, #152]	; (8005428 <_vfiprintf_r+0x224>)
 800538e:	bb1b      	cbnz	r3, 80053d8 <_vfiprintf_r+0x1d4>
 8005390:	9b03      	ldr	r3, [sp, #12]
 8005392:	3307      	adds	r3, #7
 8005394:	f023 0307 	bic.w	r3, r3, #7
 8005398:	3308      	adds	r3, #8
 800539a:	9303      	str	r3, [sp, #12]
 800539c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800539e:	444b      	add	r3, r9
 80053a0:	9309      	str	r3, [sp, #36]	; 0x24
 80053a2:	e750      	b.n	8005246 <_vfiprintf_r+0x42>
 80053a4:	fb05 3202 	mla	r2, r5, r2, r3
 80053a8:	2001      	movs	r0, #1
 80053aa:	4688      	mov	r8, r1
 80053ac:	e78a      	b.n	80052c4 <_vfiprintf_r+0xc0>
 80053ae:	2300      	movs	r3, #0
 80053b0:	f108 0801 	add.w	r8, r8, #1
 80053b4:	9305      	str	r3, [sp, #20]
 80053b6:	4619      	mov	r1, r3
 80053b8:	250a      	movs	r5, #10
 80053ba:	4640      	mov	r0, r8
 80053bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053c0:	3a30      	subs	r2, #48	; 0x30
 80053c2:	2a09      	cmp	r2, #9
 80053c4:	d903      	bls.n	80053ce <_vfiprintf_r+0x1ca>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0c3      	beq.n	8005352 <_vfiprintf_r+0x14e>
 80053ca:	9105      	str	r1, [sp, #20]
 80053cc:	e7c1      	b.n	8005352 <_vfiprintf_r+0x14e>
 80053ce:	fb05 2101 	mla	r1, r5, r1, r2
 80053d2:	2301      	movs	r3, #1
 80053d4:	4680      	mov	r8, r0
 80053d6:	e7f0      	b.n	80053ba <_vfiprintf_r+0x1b6>
 80053d8:	ab03      	add	r3, sp, #12
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	4622      	mov	r2, r4
 80053de:	4b13      	ldr	r3, [pc, #76]	; (800542c <_vfiprintf_r+0x228>)
 80053e0:	a904      	add	r1, sp, #16
 80053e2:	4630      	mov	r0, r6
 80053e4:	f3af 8000 	nop.w
 80053e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80053ec:	4681      	mov	r9, r0
 80053ee:	d1d5      	bne.n	800539c <_vfiprintf_r+0x198>
 80053f0:	89a3      	ldrh	r3, [r4, #12]
 80053f2:	065b      	lsls	r3, r3, #25
 80053f4:	f53f af7e 	bmi.w	80052f4 <_vfiprintf_r+0xf0>
 80053f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053fa:	e77d      	b.n	80052f8 <_vfiprintf_r+0xf4>
 80053fc:	ab03      	add	r3, sp, #12
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	4622      	mov	r2, r4
 8005402:	4b0a      	ldr	r3, [pc, #40]	; (800542c <_vfiprintf_r+0x228>)
 8005404:	a904      	add	r1, sp, #16
 8005406:	4630      	mov	r0, r6
 8005408:	f000 f888 	bl	800551c <_printf_i>
 800540c:	e7ec      	b.n	80053e8 <_vfiprintf_r+0x1e4>
 800540e:	bf00      	nop
 8005410:	08005d84 	.word	0x08005d84
 8005414:	08005dc4 	.word	0x08005dc4
 8005418:	08005da4 	.word	0x08005da4
 800541c:	08005d64 	.word	0x08005d64
 8005420:	08005dca 	.word	0x08005dca
 8005424:	08005dce 	.word	0x08005dce
 8005428:	00000000 	.word	0x00000000
 800542c:	080051df 	.word	0x080051df

08005430 <_printf_common>:
 8005430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005434:	4691      	mov	r9, r2
 8005436:	461f      	mov	r7, r3
 8005438:	688a      	ldr	r2, [r1, #8]
 800543a:	690b      	ldr	r3, [r1, #16]
 800543c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005440:	4293      	cmp	r3, r2
 8005442:	bfb8      	it	lt
 8005444:	4613      	movlt	r3, r2
 8005446:	f8c9 3000 	str.w	r3, [r9]
 800544a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800544e:	4606      	mov	r6, r0
 8005450:	460c      	mov	r4, r1
 8005452:	b112      	cbz	r2, 800545a <_printf_common+0x2a>
 8005454:	3301      	adds	r3, #1
 8005456:	f8c9 3000 	str.w	r3, [r9]
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	0699      	lsls	r1, r3, #26
 800545e:	bf42      	ittt	mi
 8005460:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005464:	3302      	addmi	r3, #2
 8005466:	f8c9 3000 	strmi.w	r3, [r9]
 800546a:	6825      	ldr	r5, [r4, #0]
 800546c:	f015 0506 	ands.w	r5, r5, #6
 8005470:	d107      	bne.n	8005482 <_printf_common+0x52>
 8005472:	f104 0a19 	add.w	sl, r4, #25
 8005476:	68e3      	ldr	r3, [r4, #12]
 8005478:	f8d9 2000 	ldr.w	r2, [r9]
 800547c:	1a9b      	subs	r3, r3, r2
 800547e:	42ab      	cmp	r3, r5
 8005480:	dc28      	bgt.n	80054d4 <_printf_common+0xa4>
 8005482:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005486:	6822      	ldr	r2, [r4, #0]
 8005488:	3300      	adds	r3, #0
 800548a:	bf18      	it	ne
 800548c:	2301      	movne	r3, #1
 800548e:	0692      	lsls	r2, r2, #26
 8005490:	d42d      	bmi.n	80054ee <_printf_common+0xbe>
 8005492:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005496:	4639      	mov	r1, r7
 8005498:	4630      	mov	r0, r6
 800549a:	47c0      	blx	r8
 800549c:	3001      	adds	r0, #1
 800549e:	d020      	beq.n	80054e2 <_printf_common+0xb2>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	68e5      	ldr	r5, [r4, #12]
 80054a4:	f8d9 2000 	ldr.w	r2, [r9]
 80054a8:	f003 0306 	and.w	r3, r3, #6
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	bf08      	it	eq
 80054b0:	1aad      	subeq	r5, r5, r2
 80054b2:	68a3      	ldr	r3, [r4, #8]
 80054b4:	6922      	ldr	r2, [r4, #16]
 80054b6:	bf0c      	ite	eq
 80054b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054bc:	2500      	movne	r5, #0
 80054be:	4293      	cmp	r3, r2
 80054c0:	bfc4      	itt	gt
 80054c2:	1a9b      	subgt	r3, r3, r2
 80054c4:	18ed      	addgt	r5, r5, r3
 80054c6:	f04f 0900 	mov.w	r9, #0
 80054ca:	341a      	adds	r4, #26
 80054cc:	454d      	cmp	r5, r9
 80054ce:	d11a      	bne.n	8005506 <_printf_common+0xd6>
 80054d0:	2000      	movs	r0, #0
 80054d2:	e008      	b.n	80054e6 <_printf_common+0xb6>
 80054d4:	2301      	movs	r3, #1
 80054d6:	4652      	mov	r2, sl
 80054d8:	4639      	mov	r1, r7
 80054da:	4630      	mov	r0, r6
 80054dc:	47c0      	blx	r8
 80054de:	3001      	adds	r0, #1
 80054e0:	d103      	bne.n	80054ea <_printf_common+0xba>
 80054e2:	f04f 30ff 	mov.w	r0, #4294967295
 80054e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ea:	3501      	adds	r5, #1
 80054ec:	e7c3      	b.n	8005476 <_printf_common+0x46>
 80054ee:	18e1      	adds	r1, r4, r3
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	2030      	movs	r0, #48	; 0x30
 80054f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054f8:	4422      	add	r2, r4
 80054fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005502:	3302      	adds	r3, #2
 8005504:	e7c5      	b.n	8005492 <_printf_common+0x62>
 8005506:	2301      	movs	r3, #1
 8005508:	4622      	mov	r2, r4
 800550a:	4639      	mov	r1, r7
 800550c:	4630      	mov	r0, r6
 800550e:	47c0      	blx	r8
 8005510:	3001      	adds	r0, #1
 8005512:	d0e6      	beq.n	80054e2 <_printf_common+0xb2>
 8005514:	f109 0901 	add.w	r9, r9, #1
 8005518:	e7d8      	b.n	80054cc <_printf_common+0x9c>
	...

0800551c <_printf_i>:
 800551c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005520:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005524:	460c      	mov	r4, r1
 8005526:	7e09      	ldrb	r1, [r1, #24]
 8005528:	b085      	sub	sp, #20
 800552a:	296e      	cmp	r1, #110	; 0x6e
 800552c:	4617      	mov	r7, r2
 800552e:	4606      	mov	r6, r0
 8005530:	4698      	mov	r8, r3
 8005532:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005534:	f000 80b3 	beq.w	800569e <_printf_i+0x182>
 8005538:	d822      	bhi.n	8005580 <_printf_i+0x64>
 800553a:	2963      	cmp	r1, #99	; 0x63
 800553c:	d036      	beq.n	80055ac <_printf_i+0x90>
 800553e:	d80a      	bhi.n	8005556 <_printf_i+0x3a>
 8005540:	2900      	cmp	r1, #0
 8005542:	f000 80b9 	beq.w	80056b8 <_printf_i+0x19c>
 8005546:	2958      	cmp	r1, #88	; 0x58
 8005548:	f000 8083 	beq.w	8005652 <_printf_i+0x136>
 800554c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005550:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005554:	e032      	b.n	80055bc <_printf_i+0xa0>
 8005556:	2964      	cmp	r1, #100	; 0x64
 8005558:	d001      	beq.n	800555e <_printf_i+0x42>
 800555a:	2969      	cmp	r1, #105	; 0x69
 800555c:	d1f6      	bne.n	800554c <_printf_i+0x30>
 800555e:	6820      	ldr	r0, [r4, #0]
 8005560:	6813      	ldr	r3, [r2, #0]
 8005562:	0605      	lsls	r5, r0, #24
 8005564:	f103 0104 	add.w	r1, r3, #4
 8005568:	d52a      	bpl.n	80055c0 <_printf_i+0xa4>
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6011      	str	r1, [r2, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	da03      	bge.n	800557a <_printf_i+0x5e>
 8005572:	222d      	movs	r2, #45	; 0x2d
 8005574:	425b      	negs	r3, r3
 8005576:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800557a:	486f      	ldr	r0, [pc, #444]	; (8005738 <_printf_i+0x21c>)
 800557c:	220a      	movs	r2, #10
 800557e:	e039      	b.n	80055f4 <_printf_i+0xd8>
 8005580:	2973      	cmp	r1, #115	; 0x73
 8005582:	f000 809d 	beq.w	80056c0 <_printf_i+0x1a4>
 8005586:	d808      	bhi.n	800559a <_printf_i+0x7e>
 8005588:	296f      	cmp	r1, #111	; 0x6f
 800558a:	d020      	beq.n	80055ce <_printf_i+0xb2>
 800558c:	2970      	cmp	r1, #112	; 0x70
 800558e:	d1dd      	bne.n	800554c <_printf_i+0x30>
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	f043 0320 	orr.w	r3, r3, #32
 8005596:	6023      	str	r3, [r4, #0]
 8005598:	e003      	b.n	80055a2 <_printf_i+0x86>
 800559a:	2975      	cmp	r1, #117	; 0x75
 800559c:	d017      	beq.n	80055ce <_printf_i+0xb2>
 800559e:	2978      	cmp	r1, #120	; 0x78
 80055a0:	d1d4      	bne.n	800554c <_printf_i+0x30>
 80055a2:	2378      	movs	r3, #120	; 0x78
 80055a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055a8:	4864      	ldr	r0, [pc, #400]	; (800573c <_printf_i+0x220>)
 80055aa:	e055      	b.n	8005658 <_printf_i+0x13c>
 80055ac:	6813      	ldr	r3, [r2, #0]
 80055ae:	1d19      	adds	r1, r3, #4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6011      	str	r1, [r2, #0]
 80055b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055bc:	2301      	movs	r3, #1
 80055be:	e08c      	b.n	80056da <_printf_i+0x1be>
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6011      	str	r1, [r2, #0]
 80055c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055c8:	bf18      	it	ne
 80055ca:	b21b      	sxthne	r3, r3
 80055cc:	e7cf      	b.n	800556e <_printf_i+0x52>
 80055ce:	6813      	ldr	r3, [r2, #0]
 80055d0:	6825      	ldr	r5, [r4, #0]
 80055d2:	1d18      	adds	r0, r3, #4
 80055d4:	6010      	str	r0, [r2, #0]
 80055d6:	0628      	lsls	r0, r5, #24
 80055d8:	d501      	bpl.n	80055de <_printf_i+0xc2>
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	e002      	b.n	80055e4 <_printf_i+0xc8>
 80055de:	0668      	lsls	r0, r5, #25
 80055e0:	d5fb      	bpl.n	80055da <_printf_i+0xbe>
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	4854      	ldr	r0, [pc, #336]	; (8005738 <_printf_i+0x21c>)
 80055e6:	296f      	cmp	r1, #111	; 0x6f
 80055e8:	bf14      	ite	ne
 80055ea:	220a      	movne	r2, #10
 80055ec:	2208      	moveq	r2, #8
 80055ee:	2100      	movs	r1, #0
 80055f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055f4:	6865      	ldr	r5, [r4, #4]
 80055f6:	60a5      	str	r5, [r4, #8]
 80055f8:	2d00      	cmp	r5, #0
 80055fa:	f2c0 8095 	blt.w	8005728 <_printf_i+0x20c>
 80055fe:	6821      	ldr	r1, [r4, #0]
 8005600:	f021 0104 	bic.w	r1, r1, #4
 8005604:	6021      	str	r1, [r4, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d13d      	bne.n	8005686 <_printf_i+0x16a>
 800560a:	2d00      	cmp	r5, #0
 800560c:	f040 808e 	bne.w	800572c <_printf_i+0x210>
 8005610:	4665      	mov	r5, ip
 8005612:	2a08      	cmp	r2, #8
 8005614:	d10b      	bne.n	800562e <_printf_i+0x112>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	07db      	lsls	r3, r3, #31
 800561a:	d508      	bpl.n	800562e <_printf_i+0x112>
 800561c:	6923      	ldr	r3, [r4, #16]
 800561e:	6862      	ldr	r2, [r4, #4]
 8005620:	429a      	cmp	r2, r3
 8005622:	bfde      	ittt	le
 8005624:	2330      	movle	r3, #48	; 0x30
 8005626:	f805 3c01 	strble.w	r3, [r5, #-1]
 800562a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800562e:	ebac 0305 	sub.w	r3, ip, r5
 8005632:	6123      	str	r3, [r4, #16]
 8005634:	f8cd 8000 	str.w	r8, [sp]
 8005638:	463b      	mov	r3, r7
 800563a:	aa03      	add	r2, sp, #12
 800563c:	4621      	mov	r1, r4
 800563e:	4630      	mov	r0, r6
 8005640:	f7ff fef6 	bl	8005430 <_printf_common>
 8005644:	3001      	adds	r0, #1
 8005646:	d14d      	bne.n	80056e4 <_printf_i+0x1c8>
 8005648:	f04f 30ff 	mov.w	r0, #4294967295
 800564c:	b005      	add	sp, #20
 800564e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005652:	4839      	ldr	r0, [pc, #228]	; (8005738 <_printf_i+0x21c>)
 8005654:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005658:	6813      	ldr	r3, [r2, #0]
 800565a:	6821      	ldr	r1, [r4, #0]
 800565c:	1d1d      	adds	r5, r3, #4
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6015      	str	r5, [r2, #0]
 8005662:	060a      	lsls	r2, r1, #24
 8005664:	d50b      	bpl.n	800567e <_printf_i+0x162>
 8005666:	07ca      	lsls	r2, r1, #31
 8005668:	bf44      	itt	mi
 800566a:	f041 0120 	orrmi.w	r1, r1, #32
 800566e:	6021      	strmi	r1, [r4, #0]
 8005670:	b91b      	cbnz	r3, 800567a <_printf_i+0x15e>
 8005672:	6822      	ldr	r2, [r4, #0]
 8005674:	f022 0220 	bic.w	r2, r2, #32
 8005678:	6022      	str	r2, [r4, #0]
 800567a:	2210      	movs	r2, #16
 800567c:	e7b7      	b.n	80055ee <_printf_i+0xd2>
 800567e:	064d      	lsls	r5, r1, #25
 8005680:	bf48      	it	mi
 8005682:	b29b      	uxthmi	r3, r3
 8005684:	e7ef      	b.n	8005666 <_printf_i+0x14a>
 8005686:	4665      	mov	r5, ip
 8005688:	fbb3 f1f2 	udiv	r1, r3, r2
 800568c:	fb02 3311 	mls	r3, r2, r1, r3
 8005690:	5cc3      	ldrb	r3, [r0, r3]
 8005692:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005696:	460b      	mov	r3, r1
 8005698:	2900      	cmp	r1, #0
 800569a:	d1f5      	bne.n	8005688 <_printf_i+0x16c>
 800569c:	e7b9      	b.n	8005612 <_printf_i+0xf6>
 800569e:	6813      	ldr	r3, [r2, #0]
 80056a0:	6825      	ldr	r5, [r4, #0]
 80056a2:	6961      	ldr	r1, [r4, #20]
 80056a4:	1d18      	adds	r0, r3, #4
 80056a6:	6010      	str	r0, [r2, #0]
 80056a8:	0628      	lsls	r0, r5, #24
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	d501      	bpl.n	80056b2 <_printf_i+0x196>
 80056ae:	6019      	str	r1, [r3, #0]
 80056b0:	e002      	b.n	80056b8 <_printf_i+0x19c>
 80056b2:	066a      	lsls	r2, r5, #25
 80056b4:	d5fb      	bpl.n	80056ae <_printf_i+0x192>
 80056b6:	8019      	strh	r1, [r3, #0]
 80056b8:	2300      	movs	r3, #0
 80056ba:	6123      	str	r3, [r4, #16]
 80056bc:	4665      	mov	r5, ip
 80056be:	e7b9      	b.n	8005634 <_printf_i+0x118>
 80056c0:	6813      	ldr	r3, [r2, #0]
 80056c2:	1d19      	adds	r1, r3, #4
 80056c4:	6011      	str	r1, [r2, #0]
 80056c6:	681d      	ldr	r5, [r3, #0]
 80056c8:	6862      	ldr	r2, [r4, #4]
 80056ca:	2100      	movs	r1, #0
 80056cc:	4628      	mov	r0, r5
 80056ce:	f7fa fe07 	bl	80002e0 <memchr>
 80056d2:	b108      	cbz	r0, 80056d8 <_printf_i+0x1bc>
 80056d4:	1b40      	subs	r0, r0, r5
 80056d6:	6060      	str	r0, [r4, #4]
 80056d8:	6863      	ldr	r3, [r4, #4]
 80056da:	6123      	str	r3, [r4, #16]
 80056dc:	2300      	movs	r3, #0
 80056de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e2:	e7a7      	b.n	8005634 <_printf_i+0x118>
 80056e4:	6923      	ldr	r3, [r4, #16]
 80056e6:	462a      	mov	r2, r5
 80056e8:	4639      	mov	r1, r7
 80056ea:	4630      	mov	r0, r6
 80056ec:	47c0      	blx	r8
 80056ee:	3001      	adds	r0, #1
 80056f0:	d0aa      	beq.n	8005648 <_printf_i+0x12c>
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	079b      	lsls	r3, r3, #30
 80056f6:	d413      	bmi.n	8005720 <_printf_i+0x204>
 80056f8:	68e0      	ldr	r0, [r4, #12]
 80056fa:	9b03      	ldr	r3, [sp, #12]
 80056fc:	4298      	cmp	r0, r3
 80056fe:	bfb8      	it	lt
 8005700:	4618      	movlt	r0, r3
 8005702:	e7a3      	b.n	800564c <_printf_i+0x130>
 8005704:	2301      	movs	r3, #1
 8005706:	464a      	mov	r2, r9
 8005708:	4639      	mov	r1, r7
 800570a:	4630      	mov	r0, r6
 800570c:	47c0      	blx	r8
 800570e:	3001      	adds	r0, #1
 8005710:	d09a      	beq.n	8005648 <_printf_i+0x12c>
 8005712:	3501      	adds	r5, #1
 8005714:	68e3      	ldr	r3, [r4, #12]
 8005716:	9a03      	ldr	r2, [sp, #12]
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	42ab      	cmp	r3, r5
 800571c:	dcf2      	bgt.n	8005704 <_printf_i+0x1e8>
 800571e:	e7eb      	b.n	80056f8 <_printf_i+0x1dc>
 8005720:	2500      	movs	r5, #0
 8005722:	f104 0919 	add.w	r9, r4, #25
 8005726:	e7f5      	b.n	8005714 <_printf_i+0x1f8>
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1ac      	bne.n	8005686 <_printf_i+0x16a>
 800572c:	7803      	ldrb	r3, [r0, #0]
 800572e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005732:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005736:	e76c      	b.n	8005612 <_printf_i+0xf6>
 8005738:	08005dd5 	.word	0x08005dd5
 800573c:	08005de6 	.word	0x08005de6

08005740 <_sbrk_r>:
 8005740:	b538      	push	{r3, r4, r5, lr}
 8005742:	4c06      	ldr	r4, [pc, #24]	; (800575c <_sbrk_r+0x1c>)
 8005744:	2300      	movs	r3, #0
 8005746:	4605      	mov	r5, r0
 8005748:	4608      	mov	r0, r1
 800574a:	6023      	str	r3, [r4, #0]
 800574c:	f7fb fa10 	bl	8000b70 <_sbrk>
 8005750:	1c43      	adds	r3, r0, #1
 8005752:	d102      	bne.n	800575a <_sbrk_r+0x1a>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	b103      	cbz	r3, 800575a <_sbrk_r+0x1a>
 8005758:	602b      	str	r3, [r5, #0]
 800575a:	bd38      	pop	{r3, r4, r5, pc}
 800575c:	24000178 	.word	0x24000178

08005760 <__sread>:
 8005760:	b510      	push	{r4, lr}
 8005762:	460c      	mov	r4, r1
 8005764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005768:	f000 fa96 	bl	8005c98 <_read_r>
 800576c:	2800      	cmp	r0, #0
 800576e:	bfab      	itete	ge
 8005770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005772:	89a3      	ldrhlt	r3, [r4, #12]
 8005774:	181b      	addge	r3, r3, r0
 8005776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800577a:	bfac      	ite	ge
 800577c:	6563      	strge	r3, [r4, #84]	; 0x54
 800577e:	81a3      	strhlt	r3, [r4, #12]
 8005780:	bd10      	pop	{r4, pc}

08005782 <__swrite>:
 8005782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005786:	461f      	mov	r7, r3
 8005788:	898b      	ldrh	r3, [r1, #12]
 800578a:	05db      	lsls	r3, r3, #23
 800578c:	4605      	mov	r5, r0
 800578e:	460c      	mov	r4, r1
 8005790:	4616      	mov	r6, r2
 8005792:	d505      	bpl.n	80057a0 <__swrite+0x1e>
 8005794:	2302      	movs	r3, #2
 8005796:	2200      	movs	r2, #0
 8005798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800579c:	f000 f9b6 	bl	8005b0c <_lseek_r>
 80057a0:	89a3      	ldrh	r3, [r4, #12]
 80057a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057aa:	81a3      	strh	r3, [r4, #12]
 80057ac:	4632      	mov	r2, r6
 80057ae:	463b      	mov	r3, r7
 80057b0:	4628      	mov	r0, r5
 80057b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057b6:	f000 b869 	b.w	800588c <_write_r>

080057ba <__sseek>:
 80057ba:	b510      	push	{r4, lr}
 80057bc:	460c      	mov	r4, r1
 80057be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c2:	f000 f9a3 	bl	8005b0c <_lseek_r>
 80057c6:	1c43      	adds	r3, r0, #1
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	bf15      	itete	ne
 80057cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80057ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057d6:	81a3      	strheq	r3, [r4, #12]
 80057d8:	bf18      	it	ne
 80057da:	81a3      	strhne	r3, [r4, #12]
 80057dc:	bd10      	pop	{r4, pc}

080057de <__sclose>:
 80057de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e2:	f000 b8d3 	b.w	800598c <_close_r>
	...

080057e8 <__swbuf_r>:
 80057e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ea:	460e      	mov	r6, r1
 80057ec:	4614      	mov	r4, r2
 80057ee:	4605      	mov	r5, r0
 80057f0:	b118      	cbz	r0, 80057fa <__swbuf_r+0x12>
 80057f2:	6983      	ldr	r3, [r0, #24]
 80057f4:	b90b      	cbnz	r3, 80057fa <__swbuf_r+0x12>
 80057f6:	f7ff fbf7 	bl	8004fe8 <__sinit>
 80057fa:	4b21      	ldr	r3, [pc, #132]	; (8005880 <__swbuf_r+0x98>)
 80057fc:	429c      	cmp	r4, r3
 80057fe:	d12a      	bne.n	8005856 <__swbuf_r+0x6e>
 8005800:	686c      	ldr	r4, [r5, #4]
 8005802:	69a3      	ldr	r3, [r4, #24]
 8005804:	60a3      	str	r3, [r4, #8]
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	071a      	lsls	r2, r3, #28
 800580a:	d52e      	bpl.n	800586a <__swbuf_r+0x82>
 800580c:	6923      	ldr	r3, [r4, #16]
 800580e:	b363      	cbz	r3, 800586a <__swbuf_r+0x82>
 8005810:	6923      	ldr	r3, [r4, #16]
 8005812:	6820      	ldr	r0, [r4, #0]
 8005814:	1ac0      	subs	r0, r0, r3
 8005816:	6963      	ldr	r3, [r4, #20]
 8005818:	b2f6      	uxtb	r6, r6
 800581a:	4283      	cmp	r3, r0
 800581c:	4637      	mov	r7, r6
 800581e:	dc04      	bgt.n	800582a <__swbuf_r+0x42>
 8005820:	4621      	mov	r1, r4
 8005822:	4628      	mov	r0, r5
 8005824:	f000 f948 	bl	8005ab8 <_fflush_r>
 8005828:	bb28      	cbnz	r0, 8005876 <__swbuf_r+0x8e>
 800582a:	68a3      	ldr	r3, [r4, #8]
 800582c:	3b01      	subs	r3, #1
 800582e:	60a3      	str	r3, [r4, #8]
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	6022      	str	r2, [r4, #0]
 8005836:	701e      	strb	r6, [r3, #0]
 8005838:	6963      	ldr	r3, [r4, #20]
 800583a:	3001      	adds	r0, #1
 800583c:	4283      	cmp	r3, r0
 800583e:	d004      	beq.n	800584a <__swbuf_r+0x62>
 8005840:	89a3      	ldrh	r3, [r4, #12]
 8005842:	07db      	lsls	r3, r3, #31
 8005844:	d519      	bpl.n	800587a <__swbuf_r+0x92>
 8005846:	2e0a      	cmp	r6, #10
 8005848:	d117      	bne.n	800587a <__swbuf_r+0x92>
 800584a:	4621      	mov	r1, r4
 800584c:	4628      	mov	r0, r5
 800584e:	f000 f933 	bl	8005ab8 <_fflush_r>
 8005852:	b190      	cbz	r0, 800587a <__swbuf_r+0x92>
 8005854:	e00f      	b.n	8005876 <__swbuf_r+0x8e>
 8005856:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <__swbuf_r+0x9c>)
 8005858:	429c      	cmp	r4, r3
 800585a:	d101      	bne.n	8005860 <__swbuf_r+0x78>
 800585c:	68ac      	ldr	r4, [r5, #8]
 800585e:	e7d0      	b.n	8005802 <__swbuf_r+0x1a>
 8005860:	4b09      	ldr	r3, [pc, #36]	; (8005888 <__swbuf_r+0xa0>)
 8005862:	429c      	cmp	r4, r3
 8005864:	bf08      	it	eq
 8005866:	68ec      	ldreq	r4, [r5, #12]
 8005868:	e7cb      	b.n	8005802 <__swbuf_r+0x1a>
 800586a:	4621      	mov	r1, r4
 800586c:	4628      	mov	r0, r5
 800586e:	f000 f81f 	bl	80058b0 <__swsetup_r>
 8005872:	2800      	cmp	r0, #0
 8005874:	d0cc      	beq.n	8005810 <__swbuf_r+0x28>
 8005876:	f04f 37ff 	mov.w	r7, #4294967295
 800587a:	4638      	mov	r0, r7
 800587c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800587e:	bf00      	nop
 8005880:	08005d84 	.word	0x08005d84
 8005884:	08005da4 	.word	0x08005da4
 8005888:	08005d64 	.word	0x08005d64

0800588c <_write_r>:
 800588c:	b538      	push	{r3, r4, r5, lr}
 800588e:	4c07      	ldr	r4, [pc, #28]	; (80058ac <_write_r+0x20>)
 8005890:	4605      	mov	r5, r0
 8005892:	4608      	mov	r0, r1
 8005894:	4611      	mov	r1, r2
 8005896:	2200      	movs	r2, #0
 8005898:	6022      	str	r2, [r4, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	f7fb fae2 	bl	8000e64 <_write>
 80058a0:	1c43      	adds	r3, r0, #1
 80058a2:	d102      	bne.n	80058aa <_write_r+0x1e>
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	b103      	cbz	r3, 80058aa <_write_r+0x1e>
 80058a8:	602b      	str	r3, [r5, #0]
 80058aa:	bd38      	pop	{r3, r4, r5, pc}
 80058ac:	24000178 	.word	0x24000178

080058b0 <__swsetup_r>:
 80058b0:	4b32      	ldr	r3, [pc, #200]	; (800597c <__swsetup_r+0xcc>)
 80058b2:	b570      	push	{r4, r5, r6, lr}
 80058b4:	681d      	ldr	r5, [r3, #0]
 80058b6:	4606      	mov	r6, r0
 80058b8:	460c      	mov	r4, r1
 80058ba:	b125      	cbz	r5, 80058c6 <__swsetup_r+0x16>
 80058bc:	69ab      	ldr	r3, [r5, #24]
 80058be:	b913      	cbnz	r3, 80058c6 <__swsetup_r+0x16>
 80058c0:	4628      	mov	r0, r5
 80058c2:	f7ff fb91 	bl	8004fe8 <__sinit>
 80058c6:	4b2e      	ldr	r3, [pc, #184]	; (8005980 <__swsetup_r+0xd0>)
 80058c8:	429c      	cmp	r4, r3
 80058ca:	d10f      	bne.n	80058ec <__swsetup_r+0x3c>
 80058cc:	686c      	ldr	r4, [r5, #4]
 80058ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	0715      	lsls	r5, r2, #28
 80058d6:	d42c      	bmi.n	8005932 <__swsetup_r+0x82>
 80058d8:	06d0      	lsls	r0, r2, #27
 80058da:	d411      	bmi.n	8005900 <__swsetup_r+0x50>
 80058dc:	2209      	movs	r2, #9
 80058de:	6032      	str	r2, [r6, #0]
 80058e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e4:	81a3      	strh	r3, [r4, #12]
 80058e6:	f04f 30ff 	mov.w	r0, #4294967295
 80058ea:	e03e      	b.n	800596a <__swsetup_r+0xba>
 80058ec:	4b25      	ldr	r3, [pc, #148]	; (8005984 <__swsetup_r+0xd4>)
 80058ee:	429c      	cmp	r4, r3
 80058f0:	d101      	bne.n	80058f6 <__swsetup_r+0x46>
 80058f2:	68ac      	ldr	r4, [r5, #8]
 80058f4:	e7eb      	b.n	80058ce <__swsetup_r+0x1e>
 80058f6:	4b24      	ldr	r3, [pc, #144]	; (8005988 <__swsetup_r+0xd8>)
 80058f8:	429c      	cmp	r4, r3
 80058fa:	bf08      	it	eq
 80058fc:	68ec      	ldreq	r4, [r5, #12]
 80058fe:	e7e6      	b.n	80058ce <__swsetup_r+0x1e>
 8005900:	0751      	lsls	r1, r2, #29
 8005902:	d512      	bpl.n	800592a <__swsetup_r+0x7a>
 8005904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005906:	b141      	cbz	r1, 800591a <__swsetup_r+0x6a>
 8005908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800590c:	4299      	cmp	r1, r3
 800590e:	d002      	beq.n	8005916 <__swsetup_r+0x66>
 8005910:	4630      	mov	r0, r6
 8005912:	f000 f973 	bl	8005bfc <_free_r>
 8005916:	2300      	movs	r3, #0
 8005918:	6363      	str	r3, [r4, #52]	; 0x34
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005920:	81a3      	strh	r3, [r4, #12]
 8005922:	2300      	movs	r3, #0
 8005924:	6063      	str	r3, [r4, #4]
 8005926:	6923      	ldr	r3, [r4, #16]
 8005928:	6023      	str	r3, [r4, #0]
 800592a:	89a3      	ldrh	r3, [r4, #12]
 800592c:	f043 0308 	orr.w	r3, r3, #8
 8005930:	81a3      	strh	r3, [r4, #12]
 8005932:	6923      	ldr	r3, [r4, #16]
 8005934:	b94b      	cbnz	r3, 800594a <__swsetup_r+0x9a>
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800593c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005940:	d003      	beq.n	800594a <__swsetup_r+0x9a>
 8005942:	4621      	mov	r1, r4
 8005944:	4630      	mov	r0, r6
 8005946:	f000 f917 	bl	8005b78 <__smakebuf_r>
 800594a:	89a2      	ldrh	r2, [r4, #12]
 800594c:	f012 0301 	ands.w	r3, r2, #1
 8005950:	d00c      	beq.n	800596c <__swsetup_r+0xbc>
 8005952:	2300      	movs	r3, #0
 8005954:	60a3      	str	r3, [r4, #8]
 8005956:	6963      	ldr	r3, [r4, #20]
 8005958:	425b      	negs	r3, r3
 800595a:	61a3      	str	r3, [r4, #24]
 800595c:	6923      	ldr	r3, [r4, #16]
 800595e:	b953      	cbnz	r3, 8005976 <__swsetup_r+0xc6>
 8005960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005964:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005968:	d1ba      	bne.n	80058e0 <__swsetup_r+0x30>
 800596a:	bd70      	pop	{r4, r5, r6, pc}
 800596c:	0792      	lsls	r2, r2, #30
 800596e:	bf58      	it	pl
 8005970:	6963      	ldrpl	r3, [r4, #20]
 8005972:	60a3      	str	r3, [r4, #8]
 8005974:	e7f2      	b.n	800595c <__swsetup_r+0xac>
 8005976:	2000      	movs	r0, #0
 8005978:	e7f7      	b.n	800596a <__swsetup_r+0xba>
 800597a:	bf00      	nop
 800597c:	24000010 	.word	0x24000010
 8005980:	08005d84 	.word	0x08005d84
 8005984:	08005da4 	.word	0x08005da4
 8005988:	08005d64 	.word	0x08005d64

0800598c <_close_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	4c06      	ldr	r4, [pc, #24]	; (80059a8 <_close_r+0x1c>)
 8005990:	2300      	movs	r3, #0
 8005992:	4605      	mov	r5, r0
 8005994:	4608      	mov	r0, r1
 8005996:	6023      	str	r3, [r4, #0]
 8005998:	f7fb f8b5 	bl	8000b06 <_close>
 800599c:	1c43      	adds	r3, r0, #1
 800599e:	d102      	bne.n	80059a6 <_close_r+0x1a>
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	b103      	cbz	r3, 80059a6 <_close_r+0x1a>
 80059a4:	602b      	str	r3, [r5, #0]
 80059a6:	bd38      	pop	{r3, r4, r5, pc}
 80059a8:	24000178 	.word	0x24000178

080059ac <__sflush_r>:
 80059ac:	898a      	ldrh	r2, [r1, #12]
 80059ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b2:	4605      	mov	r5, r0
 80059b4:	0710      	lsls	r0, r2, #28
 80059b6:	460c      	mov	r4, r1
 80059b8:	d458      	bmi.n	8005a6c <__sflush_r+0xc0>
 80059ba:	684b      	ldr	r3, [r1, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	dc05      	bgt.n	80059cc <__sflush_r+0x20>
 80059c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	dc02      	bgt.n	80059cc <__sflush_r+0x20>
 80059c6:	2000      	movs	r0, #0
 80059c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059ce:	2e00      	cmp	r6, #0
 80059d0:	d0f9      	beq.n	80059c6 <__sflush_r+0x1a>
 80059d2:	2300      	movs	r3, #0
 80059d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059d8:	682f      	ldr	r7, [r5, #0]
 80059da:	6a21      	ldr	r1, [r4, #32]
 80059dc:	602b      	str	r3, [r5, #0]
 80059de:	d032      	beq.n	8005a46 <__sflush_r+0x9a>
 80059e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059e2:	89a3      	ldrh	r3, [r4, #12]
 80059e4:	075a      	lsls	r2, r3, #29
 80059e6:	d505      	bpl.n	80059f4 <__sflush_r+0x48>
 80059e8:	6863      	ldr	r3, [r4, #4]
 80059ea:	1ac0      	subs	r0, r0, r3
 80059ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059ee:	b10b      	cbz	r3, 80059f4 <__sflush_r+0x48>
 80059f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059f2:	1ac0      	subs	r0, r0, r3
 80059f4:	2300      	movs	r3, #0
 80059f6:	4602      	mov	r2, r0
 80059f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059fa:	6a21      	ldr	r1, [r4, #32]
 80059fc:	4628      	mov	r0, r5
 80059fe:	47b0      	blx	r6
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	89a3      	ldrh	r3, [r4, #12]
 8005a04:	d106      	bne.n	8005a14 <__sflush_r+0x68>
 8005a06:	6829      	ldr	r1, [r5, #0]
 8005a08:	291d      	cmp	r1, #29
 8005a0a:	d848      	bhi.n	8005a9e <__sflush_r+0xf2>
 8005a0c:	4a29      	ldr	r2, [pc, #164]	; (8005ab4 <__sflush_r+0x108>)
 8005a0e:	40ca      	lsrs	r2, r1
 8005a10:	07d6      	lsls	r6, r2, #31
 8005a12:	d544      	bpl.n	8005a9e <__sflush_r+0xf2>
 8005a14:	2200      	movs	r2, #0
 8005a16:	6062      	str	r2, [r4, #4]
 8005a18:	04d9      	lsls	r1, r3, #19
 8005a1a:	6922      	ldr	r2, [r4, #16]
 8005a1c:	6022      	str	r2, [r4, #0]
 8005a1e:	d504      	bpl.n	8005a2a <__sflush_r+0x7e>
 8005a20:	1c42      	adds	r2, r0, #1
 8005a22:	d101      	bne.n	8005a28 <__sflush_r+0x7c>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b903      	cbnz	r3, 8005a2a <__sflush_r+0x7e>
 8005a28:	6560      	str	r0, [r4, #84]	; 0x54
 8005a2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a2c:	602f      	str	r7, [r5, #0]
 8005a2e:	2900      	cmp	r1, #0
 8005a30:	d0c9      	beq.n	80059c6 <__sflush_r+0x1a>
 8005a32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a36:	4299      	cmp	r1, r3
 8005a38:	d002      	beq.n	8005a40 <__sflush_r+0x94>
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f000 f8de 	bl	8005bfc <_free_r>
 8005a40:	2000      	movs	r0, #0
 8005a42:	6360      	str	r0, [r4, #52]	; 0x34
 8005a44:	e7c0      	b.n	80059c8 <__sflush_r+0x1c>
 8005a46:	2301      	movs	r3, #1
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b0      	blx	r6
 8005a4c:	1c41      	adds	r1, r0, #1
 8005a4e:	d1c8      	bne.n	80059e2 <__sflush_r+0x36>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0c5      	beq.n	80059e2 <__sflush_r+0x36>
 8005a56:	2b1d      	cmp	r3, #29
 8005a58:	d001      	beq.n	8005a5e <__sflush_r+0xb2>
 8005a5a:	2b16      	cmp	r3, #22
 8005a5c:	d101      	bne.n	8005a62 <__sflush_r+0xb6>
 8005a5e:	602f      	str	r7, [r5, #0]
 8005a60:	e7b1      	b.n	80059c6 <__sflush_r+0x1a>
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a68:	81a3      	strh	r3, [r4, #12]
 8005a6a:	e7ad      	b.n	80059c8 <__sflush_r+0x1c>
 8005a6c:	690f      	ldr	r7, [r1, #16]
 8005a6e:	2f00      	cmp	r7, #0
 8005a70:	d0a9      	beq.n	80059c6 <__sflush_r+0x1a>
 8005a72:	0793      	lsls	r3, r2, #30
 8005a74:	680e      	ldr	r6, [r1, #0]
 8005a76:	bf08      	it	eq
 8005a78:	694b      	ldreq	r3, [r1, #20]
 8005a7a:	600f      	str	r7, [r1, #0]
 8005a7c:	bf18      	it	ne
 8005a7e:	2300      	movne	r3, #0
 8005a80:	eba6 0807 	sub.w	r8, r6, r7
 8005a84:	608b      	str	r3, [r1, #8]
 8005a86:	f1b8 0f00 	cmp.w	r8, #0
 8005a8a:	dd9c      	ble.n	80059c6 <__sflush_r+0x1a>
 8005a8c:	4643      	mov	r3, r8
 8005a8e:	463a      	mov	r2, r7
 8005a90:	6a21      	ldr	r1, [r4, #32]
 8005a92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a94:	4628      	mov	r0, r5
 8005a96:	47b0      	blx	r6
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	dc06      	bgt.n	8005aaa <__sflush_r+0xfe>
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aa2:	81a3      	strh	r3, [r4, #12]
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa8:	e78e      	b.n	80059c8 <__sflush_r+0x1c>
 8005aaa:	4407      	add	r7, r0
 8005aac:	eba8 0800 	sub.w	r8, r8, r0
 8005ab0:	e7e9      	b.n	8005a86 <__sflush_r+0xda>
 8005ab2:	bf00      	nop
 8005ab4:	20400001 	.word	0x20400001

08005ab8 <_fflush_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	690b      	ldr	r3, [r1, #16]
 8005abc:	4605      	mov	r5, r0
 8005abe:	460c      	mov	r4, r1
 8005ac0:	b1db      	cbz	r3, 8005afa <_fflush_r+0x42>
 8005ac2:	b118      	cbz	r0, 8005acc <_fflush_r+0x14>
 8005ac4:	6983      	ldr	r3, [r0, #24]
 8005ac6:	b90b      	cbnz	r3, 8005acc <_fflush_r+0x14>
 8005ac8:	f7ff fa8e 	bl	8004fe8 <__sinit>
 8005acc:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <_fflush_r+0x48>)
 8005ace:	429c      	cmp	r4, r3
 8005ad0:	d109      	bne.n	8005ae6 <_fflush_r+0x2e>
 8005ad2:	686c      	ldr	r4, [r5, #4]
 8005ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ad8:	b17b      	cbz	r3, 8005afa <_fflush_r+0x42>
 8005ada:	4621      	mov	r1, r4
 8005adc:	4628      	mov	r0, r5
 8005ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ae2:	f7ff bf63 	b.w	80059ac <__sflush_r>
 8005ae6:	4b07      	ldr	r3, [pc, #28]	; (8005b04 <_fflush_r+0x4c>)
 8005ae8:	429c      	cmp	r4, r3
 8005aea:	d101      	bne.n	8005af0 <_fflush_r+0x38>
 8005aec:	68ac      	ldr	r4, [r5, #8]
 8005aee:	e7f1      	b.n	8005ad4 <_fflush_r+0x1c>
 8005af0:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <_fflush_r+0x50>)
 8005af2:	429c      	cmp	r4, r3
 8005af4:	bf08      	it	eq
 8005af6:	68ec      	ldreq	r4, [r5, #12]
 8005af8:	e7ec      	b.n	8005ad4 <_fflush_r+0x1c>
 8005afa:	2000      	movs	r0, #0
 8005afc:	bd38      	pop	{r3, r4, r5, pc}
 8005afe:	bf00      	nop
 8005b00:	08005d84 	.word	0x08005d84
 8005b04:	08005da4 	.word	0x08005da4
 8005b08:	08005d64 	.word	0x08005d64

08005b0c <_lseek_r>:
 8005b0c:	b538      	push	{r3, r4, r5, lr}
 8005b0e:	4c07      	ldr	r4, [pc, #28]	; (8005b2c <_lseek_r+0x20>)
 8005b10:	4605      	mov	r5, r0
 8005b12:	4608      	mov	r0, r1
 8005b14:	4611      	mov	r1, r2
 8005b16:	2200      	movs	r2, #0
 8005b18:	6022      	str	r2, [r4, #0]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f7fb f81a 	bl	8000b54 <_lseek>
 8005b20:	1c43      	adds	r3, r0, #1
 8005b22:	d102      	bne.n	8005b2a <_lseek_r+0x1e>
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	b103      	cbz	r3, 8005b2a <_lseek_r+0x1e>
 8005b28:	602b      	str	r3, [r5, #0]
 8005b2a:	bd38      	pop	{r3, r4, r5, pc}
 8005b2c:	24000178 	.word	0x24000178

08005b30 <__swhatbuf_r>:
 8005b30:	b570      	push	{r4, r5, r6, lr}
 8005b32:	460e      	mov	r6, r1
 8005b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b38:	2900      	cmp	r1, #0
 8005b3a:	b096      	sub	sp, #88	; 0x58
 8005b3c:	4614      	mov	r4, r2
 8005b3e:	461d      	mov	r5, r3
 8005b40:	da07      	bge.n	8005b52 <__swhatbuf_r+0x22>
 8005b42:	2300      	movs	r3, #0
 8005b44:	602b      	str	r3, [r5, #0]
 8005b46:	89b3      	ldrh	r3, [r6, #12]
 8005b48:	061a      	lsls	r2, r3, #24
 8005b4a:	d410      	bmi.n	8005b6e <__swhatbuf_r+0x3e>
 8005b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b50:	e00e      	b.n	8005b70 <__swhatbuf_r+0x40>
 8005b52:	466a      	mov	r2, sp
 8005b54:	f000 f8b2 	bl	8005cbc <_fstat_r>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	dbf2      	blt.n	8005b42 <__swhatbuf_r+0x12>
 8005b5c:	9a01      	ldr	r2, [sp, #4]
 8005b5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b66:	425a      	negs	r2, r3
 8005b68:	415a      	adcs	r2, r3
 8005b6a:	602a      	str	r2, [r5, #0]
 8005b6c:	e7ee      	b.n	8005b4c <__swhatbuf_r+0x1c>
 8005b6e:	2340      	movs	r3, #64	; 0x40
 8005b70:	2000      	movs	r0, #0
 8005b72:	6023      	str	r3, [r4, #0]
 8005b74:	b016      	add	sp, #88	; 0x58
 8005b76:	bd70      	pop	{r4, r5, r6, pc}

08005b78 <__smakebuf_r>:
 8005b78:	898b      	ldrh	r3, [r1, #12]
 8005b7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b7c:	079d      	lsls	r5, r3, #30
 8005b7e:	4606      	mov	r6, r0
 8005b80:	460c      	mov	r4, r1
 8005b82:	d507      	bpl.n	8005b94 <__smakebuf_r+0x1c>
 8005b84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b88:	6023      	str	r3, [r4, #0]
 8005b8a:	6123      	str	r3, [r4, #16]
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	6163      	str	r3, [r4, #20]
 8005b90:	b002      	add	sp, #8
 8005b92:	bd70      	pop	{r4, r5, r6, pc}
 8005b94:	ab01      	add	r3, sp, #4
 8005b96:	466a      	mov	r2, sp
 8005b98:	f7ff ffca 	bl	8005b30 <__swhatbuf_r>
 8005b9c:	9900      	ldr	r1, [sp, #0]
 8005b9e:	4605      	mov	r5, r0
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f7ff faab 	bl	80050fc <_malloc_r>
 8005ba6:	b948      	cbnz	r0, 8005bbc <__smakebuf_r+0x44>
 8005ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bac:	059a      	lsls	r2, r3, #22
 8005bae:	d4ef      	bmi.n	8005b90 <__smakebuf_r+0x18>
 8005bb0:	f023 0303 	bic.w	r3, r3, #3
 8005bb4:	f043 0302 	orr.w	r3, r3, #2
 8005bb8:	81a3      	strh	r3, [r4, #12]
 8005bba:	e7e3      	b.n	8005b84 <__smakebuf_r+0xc>
 8005bbc:	4b0d      	ldr	r3, [pc, #52]	; (8005bf4 <__smakebuf_r+0x7c>)
 8005bbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	6020      	str	r0, [r4, #0]
 8005bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc8:	81a3      	strh	r3, [r4, #12]
 8005bca:	9b00      	ldr	r3, [sp, #0]
 8005bcc:	6163      	str	r3, [r4, #20]
 8005bce:	9b01      	ldr	r3, [sp, #4]
 8005bd0:	6120      	str	r0, [r4, #16]
 8005bd2:	b15b      	cbz	r3, 8005bec <__smakebuf_r+0x74>
 8005bd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bd8:	4630      	mov	r0, r6
 8005bda:	f000 f881 	bl	8005ce0 <_isatty_r>
 8005bde:	b128      	cbz	r0, 8005bec <__smakebuf_r+0x74>
 8005be0:	89a3      	ldrh	r3, [r4, #12]
 8005be2:	f023 0303 	bic.w	r3, r3, #3
 8005be6:	f043 0301 	orr.w	r3, r3, #1
 8005bea:	81a3      	strh	r3, [r4, #12]
 8005bec:	89a3      	ldrh	r3, [r4, #12]
 8005bee:	431d      	orrs	r5, r3
 8005bf0:	81a5      	strh	r5, [r4, #12]
 8005bf2:	e7cd      	b.n	8005b90 <__smakebuf_r+0x18>
 8005bf4:	08004fb1 	.word	0x08004fb1

08005bf8 <__malloc_lock>:
 8005bf8:	4770      	bx	lr

08005bfa <__malloc_unlock>:
 8005bfa:	4770      	bx	lr

08005bfc <_free_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4605      	mov	r5, r0
 8005c00:	2900      	cmp	r1, #0
 8005c02:	d045      	beq.n	8005c90 <_free_r+0x94>
 8005c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c08:	1f0c      	subs	r4, r1, #4
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	bfb8      	it	lt
 8005c0e:	18e4      	addlt	r4, r4, r3
 8005c10:	f7ff fff2 	bl	8005bf8 <__malloc_lock>
 8005c14:	4a1f      	ldr	r2, [pc, #124]	; (8005c94 <_free_r+0x98>)
 8005c16:	6813      	ldr	r3, [r2, #0]
 8005c18:	4610      	mov	r0, r2
 8005c1a:	b933      	cbnz	r3, 8005c2a <_free_r+0x2e>
 8005c1c:	6063      	str	r3, [r4, #4]
 8005c1e:	6014      	str	r4, [r2, #0]
 8005c20:	4628      	mov	r0, r5
 8005c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c26:	f7ff bfe8 	b.w	8005bfa <__malloc_unlock>
 8005c2a:	42a3      	cmp	r3, r4
 8005c2c:	d90c      	bls.n	8005c48 <_free_r+0x4c>
 8005c2e:	6821      	ldr	r1, [r4, #0]
 8005c30:	1862      	adds	r2, r4, r1
 8005c32:	4293      	cmp	r3, r2
 8005c34:	bf04      	itt	eq
 8005c36:	681a      	ldreq	r2, [r3, #0]
 8005c38:	685b      	ldreq	r3, [r3, #4]
 8005c3a:	6063      	str	r3, [r4, #4]
 8005c3c:	bf04      	itt	eq
 8005c3e:	1852      	addeq	r2, r2, r1
 8005c40:	6022      	streq	r2, [r4, #0]
 8005c42:	6004      	str	r4, [r0, #0]
 8005c44:	e7ec      	b.n	8005c20 <_free_r+0x24>
 8005c46:	4613      	mov	r3, r2
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	b10a      	cbz	r2, 8005c50 <_free_r+0x54>
 8005c4c:	42a2      	cmp	r2, r4
 8005c4e:	d9fa      	bls.n	8005c46 <_free_r+0x4a>
 8005c50:	6819      	ldr	r1, [r3, #0]
 8005c52:	1858      	adds	r0, r3, r1
 8005c54:	42a0      	cmp	r0, r4
 8005c56:	d10b      	bne.n	8005c70 <_free_r+0x74>
 8005c58:	6820      	ldr	r0, [r4, #0]
 8005c5a:	4401      	add	r1, r0
 8005c5c:	1858      	adds	r0, r3, r1
 8005c5e:	4282      	cmp	r2, r0
 8005c60:	6019      	str	r1, [r3, #0]
 8005c62:	d1dd      	bne.n	8005c20 <_free_r+0x24>
 8005c64:	6810      	ldr	r0, [r2, #0]
 8005c66:	6852      	ldr	r2, [r2, #4]
 8005c68:	605a      	str	r2, [r3, #4]
 8005c6a:	4401      	add	r1, r0
 8005c6c:	6019      	str	r1, [r3, #0]
 8005c6e:	e7d7      	b.n	8005c20 <_free_r+0x24>
 8005c70:	d902      	bls.n	8005c78 <_free_r+0x7c>
 8005c72:	230c      	movs	r3, #12
 8005c74:	602b      	str	r3, [r5, #0]
 8005c76:	e7d3      	b.n	8005c20 <_free_r+0x24>
 8005c78:	6820      	ldr	r0, [r4, #0]
 8005c7a:	1821      	adds	r1, r4, r0
 8005c7c:	428a      	cmp	r2, r1
 8005c7e:	bf04      	itt	eq
 8005c80:	6811      	ldreq	r1, [r2, #0]
 8005c82:	6852      	ldreq	r2, [r2, #4]
 8005c84:	6062      	str	r2, [r4, #4]
 8005c86:	bf04      	itt	eq
 8005c88:	1809      	addeq	r1, r1, r0
 8005c8a:	6021      	streq	r1, [r4, #0]
 8005c8c:	605c      	str	r4, [r3, #4]
 8005c8e:	e7c7      	b.n	8005c20 <_free_r+0x24>
 8005c90:	bd38      	pop	{r3, r4, r5, pc}
 8005c92:	bf00      	nop
 8005c94:	24000094 	.word	0x24000094

08005c98 <_read_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	4c07      	ldr	r4, [pc, #28]	; (8005cb8 <_read_r+0x20>)
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	4608      	mov	r0, r1
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	6022      	str	r2, [r4, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f7fa ff10 	bl	8000acc <_read>
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	d102      	bne.n	8005cb6 <_read_r+0x1e>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	b103      	cbz	r3, 8005cb6 <_read_r+0x1e>
 8005cb4:	602b      	str	r3, [r5, #0]
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
 8005cb8:	24000178 	.word	0x24000178

08005cbc <_fstat_r>:
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	4c07      	ldr	r4, [pc, #28]	; (8005cdc <_fstat_r+0x20>)
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	4605      	mov	r5, r0
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	f7fa ff28 	bl	8000b1e <_fstat>
 8005cce:	1c43      	adds	r3, r0, #1
 8005cd0:	d102      	bne.n	8005cd8 <_fstat_r+0x1c>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	b103      	cbz	r3, 8005cd8 <_fstat_r+0x1c>
 8005cd6:	602b      	str	r3, [r5, #0]
 8005cd8:	bd38      	pop	{r3, r4, r5, pc}
 8005cda:	bf00      	nop
 8005cdc:	24000178 	.word	0x24000178

08005ce0 <_isatty_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	4c06      	ldr	r4, [pc, #24]	; (8005cfc <_isatty_r+0x1c>)
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	4608      	mov	r0, r1
 8005cea:	6023      	str	r3, [r4, #0]
 8005cec:	f7fa ff27 	bl	8000b3e <_isatty>
 8005cf0:	1c43      	adds	r3, r0, #1
 8005cf2:	d102      	bne.n	8005cfa <_isatty_r+0x1a>
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	b103      	cbz	r3, 8005cfa <_isatty_r+0x1a>
 8005cf8:	602b      	str	r3, [r5, #0]
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	24000178 	.word	0x24000178

08005d00 <_init>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	bf00      	nop
 8005d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d06:	bc08      	pop	{r3}
 8005d08:	469e      	mov	lr, r3
 8005d0a:	4770      	bx	lr

08005d0c <_fini>:
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0e:	bf00      	nop
 8005d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d12:	bc08      	pop	{r3}
 8005d14:	469e      	mov	lr, r3
 8005d16:	4770      	bx	lr
